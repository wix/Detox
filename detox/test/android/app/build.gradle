apply plugin: 'com.android.application'
apply from: '../rninfo.gradle'

project.ext.react = [
    enableHermes: true
]
apply from: '../../node_modules/react-native/react.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId 'com.wix.detox.test'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0'
        ndk {
            abiFilters 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a'
        }
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'com.example.DetoxTestAppJUnitRunner'

        /*
        testInstrumentationRunnerArguments = [
                'detoxServer': 'ws://localhost:8099',
                'detoxSessionId': 'test'
        ]
        */

        missingDimensionStrategy 'detox', 'full'
    }
    splits {
        abi {
            reset()
            enable false
            universalApk false  // If true, also generate a universal APK
            include 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a'
        }
    }
    signingConfigs {
        release {
            storeFile file("keystore.jks")
            storePassword "12345678"
            keyAlias "key0"
            keyPassword "12345678"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', "${project(':detox').projectDir}/proguard-rules-app.pro"

            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        flavorDimensions 'compileRNFromSource'
        fromSource {
            dimension 'compileRNFromSource'
        }
        fromBin {
            dimension 'compileRNFromSource'
        }
    }
    packagingOptions {
        pickFirst '**/libc++_shared.so'

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation project(path: ':@react-native-community_slider')

    // noinspection GradleDynamicVersion
    fromBinImplementation('com.facebook.react:react-native:+')

    // In order to build from source:
    // 1. Uncomment the fromSourceImplementation() statement
    // 2. Uncomment associated section in settings.gradle
    // 3. Pave through the wilderness
//    fromSourceImplementation(project(path: ':ReactAndroid'))

    implementation project(':AsyncStorage')
    implementation project(':react-native-webview')
    implementation project(':react-native-community-checkbox')
    implementation project(':react-native-community-geolocation')

    androidTestImplementation(project(path: ':detox'))
    androidTestImplementation 'com.linkedin.testbutler:test-butler-library:2.2.1'
}

// Apply Hermes as our JS engine
dependencies {
    if (rnInfo.isRN69OrHigher) { // TODO this is actually likely to work with older RN versions as well
        implementation('com.facebook.react:hermes-engine:+') {
            exclude group: 'com.facebook.fbjni'
        }
    } else {
        def hermesPath = '../../node_modules/hermes-engine/android'
        debugImplementation files("$hermesPath/hermes-debug.aar")
        releaseImplementation files("$hermesPath/hermes-release.aar")
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.implementation
  into 'libs'
}
