"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2920],{15680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>y});var t=a(96540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(a),g=i,y=p["".concat(s,".").concat(g)]||p[g]||u[g]||l;return a?t.createElement(y,r(r({ref:n},d),{},{components:a})):t.createElement(y,r({ref:n},d))}));function y(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=a[c];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},92317:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var t=a(58168),i=(a(96540),a(15680));const l={},r="Device",o={unversionedId:"api/device",id:"api/device",title:"Device",description:"The device object is globally available in every test file, unless you use exposeGlobals: false in the behavior config,",source:"@site/../docs/api/device.md",sourceDirName:"api",slug:"/api/device",permalink:"/Detox/docs/next/api/device",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/api/device.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"detox run-server",permalink:"/Detox/docs/next/cli/run-server"},next:{title:"Matchers",permalink:"/Detox/docs/next/api/matchers"}},s={},c=[{value:"Public Properties",id:"public-properties",level:2},{value:"<code>device.id</code>",id:"deviceid",level:3},{value:"<code>device.name</code>",id:"devicename",level:3},{value:"<code>device.appLaunchArgs</code>",id:"deviceapplaunchargs",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>device.selectApp(name)</code>",id:"deviceselectappname",level:3},{value:"<code>device.launchApp(params)</code>",id:"devicelaunchappparams",level:3},{value:"1. <code>newInstance</code>\u2014Launching a New Instance of the App",id:"1-newinstancelaunching-a-new-instance-of-the-app",level:4},{value:"2. <code>permissions</code>\u2014Set Runtime Permissions (iOS Only)",id:"2-permissionsset-runtime-permissions-ios-only",level:4},{value:"Supported Permissions",id:"supported-permissions",level:5},{value:"3. <code>url</code>\u2014Launching with URL",id:"3-urllaunching-with-url",level:4},{value:"4. <code>userNotification</code>\u2014Launching with User Notifications",id:"4-usernotificationlaunching-with-user-notifications",level:4},{value:"5. <code>userActivity</code>\u2014Launch with User Activity (iOS Only)",id:"5-useractivitylaunch-with-user-activity-ios-only",level:4},{value:"6. <code>delete</code>\u2014Delete and Reinstall Application Before Launching",id:"6-deletedelete-and-reinstall-application-before-launching",level:4},{value:"7. <code>launchArgs</code>\u2014Additional Process Launch Arguments",id:"7-launchargsadditional-process-launch-arguments",level:4},{value:"8. <code>disableTouchIndicators</code>\u2014Disable Touch Indicators (iOS Only)",id:"8-disabletouchindicatorsdisable-touch-indicators-ios-only",level:4},{value:"9. <code>languageAndLocale</code>\u2014Launch with a Specific Language and/or Local (iOS Only)",id:"9-languageandlocalelaunch-with-a-specific-language-andor-local-ios-only",level:4},{value:"10. <code>detoxEnableSynchronization</code>\u2014Initialize Detox with synchronization enabled or disabled at app launch",id:"10-detoxenablesynchronizationinitialize-detox-with-synchronization-enabled-or-disabled-at-app-launch",level:4},{value:"11. <code>detoxURLBlacklistRegex</code>\u2014Initialize the URL Blacklist at app launch",id:"11-detoxurlblacklistregexinitialize-the-url-blacklist-at-app-launch",level:4},{value:"12. <code>detoxDisableWebKitSecurity</code>\u2014Disable WebKit Security (iOS Only)",id:"12-detoxdisablewebkitsecuritydisable-webkit-security-ios-only",level:4},{value:"<code>device.terminateApp()</code>",id:"deviceterminateapp",level:3},{value:"<code>device.sendToHome()</code>",id:"devicesendtohome",level:3},{value:"<code>device.reloadReactNative()</code>",id:"devicereloadreactnative",level:3},{value:"<code>device.installApp()</code>",id:"deviceinstallapp",level:3},{value:"<code>device.uninstallApp()</code>",id:"deviceuninstallapp",level:3},{value:"<code>device.openURL({url, sourceApp[optional]})</code>",id:"deviceopenurlurl-sourceappoptional",level:3},{value:"<code>device.sendUserNotification(params)</code>",id:"devicesendusernotificationparams",level:3},{value:"<code>device.sendUserActivity(params)</code> <strong>iOS Only</strong>",id:"devicesenduseractivityparams-ios-only",level:3},{value:"<code>device.setOrientation(orientation)</code>",id:"devicesetorientationorientation",level:3},{value:"<code>device.setLocation(lat, lon)</code>",id:"devicesetlocationlat-lon",level:3},{value:"<code>device.disableSynchronization()</code>",id:"devicedisablesynchronization",level:3},{value:"<code>device.enableSynchronization()</code>",id:"deviceenablesynchronization",level:3},{value:"<code>device.setURLBlacklist([urls])</code>",id:"deviceseturlblacklisturls",level:3},{value:"<code>device.resetContentAndSettings()</code> <strong>iOS Only</strong>",id:"deviceresetcontentandsettings-ios-only",level:3},{value:"<code>device.getPlatform()</code>",id:"devicegetplatform",level:3},{value:"<code>device.tap(point, shouldIgnoreStatusBar)</code>",id:"devicetappoint-shouldignorestatusbar",level:3},{value:"tap parameters",id:"tap-parameters",level:4},{value:"tap examples",id:"tap-examples",level:4},{value:"<code>device.longPress(point, duration, shouldIgnoreStatusBar)</code>",id:"devicelongpresspoint-duration-shouldignorestatusbar",level:3},{value:"longPress parameters",id:"longpress-parameters",level:4},{value:"longPress examples",id:"longpress-examples",level:4},{value:"<code>device.takeScreenshot([name])</code>",id:"devicetakescreenshotname",level:3},{value:"<code>device.captureViewHierarchy([name])</code>",id:"devicecaptureviewhierarchyname",level:3},{value:"<code>device.generateViewHierarchyXml([shouldInjectTestIds])</code>",id:"devicegenerateviewhierarchyxmlshouldinjecttestids",level:3},{value:"<code>device.shake()</code> <strong>iOS Only</strong>",id:"deviceshake-ios-only",level:3},{value:"<code>device.setBiometricEnrollment(bool)</code> <strong>iOS Only</strong>",id:"devicesetbiometricenrollmentbool-ios-only",level:3},{value:"<code>device.matchFace()</code> <strong>iOS Only</strong>",id:"devicematchface-ios-only",level:3},{value:"<code>device.unmatchFace()</code> <strong>iOS Only</strong>",id:"deviceunmatchface-ios-only",level:3},{value:"<code>device.matchFinger()</code> <strong>iOS Only</strong>",id:"devicematchfinger-ios-only",level:3},{value:"<code>device.unmatchFinger()</code> <strong>iOS Only</strong>",id:"deviceunmatchfinger-ios-only",level:3},{value:"<code>device.clearKeychain()</code> <strong>iOS Only</strong>",id:"deviceclearkeychain-ios-only",level:3},{value:"<code>device.setStatusBar()</code> <strong>iOS Only</strong>",id:"devicesetstatusbar-ios-only",level:3},{value:"<code>device.resetStatusBar()</code> <strong>iOS Only</strong>",id:"deviceresetstatusbar-ios-only",level:3},{value:"<code>device.reverseTcpPort()</code> <strong>Android Only</strong>",id:"devicereversetcpport-android-only",level:3},{value:"<code>device.unreverseTcpPort()</code> <strong>Android Only</strong>",id:"deviceunreversetcpport-android-only",level:3},{value:"<code>device.pressBack()</code> <strong>Android Only</strong>",id:"devicepressback-android-only",level:3},{value:"<code>device.getUiDevice()</code> <strong>Android Only</strong>",id:"devicegetuidevice-android-only",level:3}],d={toc:c},p="wrapper";function u({components:e,...n}){return(0,i.yg)(p,(0,t.A)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"device"},"Device"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"device")," object is globally available in every test file, unless you use ",(0,i.yg)("inlineCode",{parentName:"p"},"exposeGlobals: false")," in the behavior config,\nand even then you can import it from Detox package:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"const { device } = require('detox');\n")),(0,i.yg)("p",null,"It enables control over the current attached device."),(0,i.yg)("h2",{id:"public-properties"},"Public Properties"),(0,i.yg)("h3",{id:"deviceid"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.id")),(0,i.yg)("p",null,"Holds the environment-unique ID of the device - namely, the ",(0,i.yg)("inlineCode",{parentName:"p"},"adb")," ID on Android (e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"emulator-5554"),") and the Mac-global simulator UDID on iOS, as used by ",(0,i.yg)("inlineCode",{parentName:"p"},"simctl")," (e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"),")."),(0,i.yg)("p",null,"The value will be ",(0,i.yg)("inlineCode",{parentName:"p"},"undefined")," until the device is properly ",(0,i.yg)("em",{parentName:"p"},"prepared")," (i.e. in ",(0,i.yg)("inlineCode",{parentName:"p"},"detox.init()"),")."),(0,i.yg)("h3",{id:"devicename"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.name")),(0,i.yg)("p",null,"Holds a descriptive name of the device. Example: ",(0,i.yg)("inlineCode",{parentName:"p"},"emulator-5554 (Pixel_API_26)")),(0,i.yg)("p",null,"The value will be ",(0,i.yg)("inlineCode",{parentName:"p"},"undefined")," until the device is properly ",(0,i.yg)("em",{parentName:"p"},"prepared")," (i.e. in ",(0,i.yg)("inlineCode",{parentName:"p"},"detox.init()"),")."),(0,i.yg)("h3",{id:"deviceapplaunchargs"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.appLaunchArgs")),(0,i.yg)("p",null,"Access the launch-arguments predefined by the user in preliminary, static scopes such as the Detox ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/config/apps"},"configuration file"),"\nand ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/cli/test"},"command-line arguments"),". This access allows, through dedicated methods, for both value-querying and modification:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"// Modify some of the predefined arguments:\ndevice.appLaunchArgs.modify({\n  mockServerPort: 1234,\n});\n// Retrieve the arguments:\ndevice.appLaunchArgs.get(); // ==> { mockServerPort: 1234 }\n// Reset (i.e. remove all arguments):\ndevice.appLaunchArgs.reset();\n")),(0,i.yg)("p",null,"In multi-app environments, you might want to persist your values between ",(0,i.yg)("inlineCode",{parentName:"p"},"device.selectApp(name)")," calls:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"device.appLaunchArgs.modify({ transientArg: 'value' });\ndevice.appLaunchArgs.shared.modify({\n  permanentMockServerPort: 1234,\n};\n\ndevice.appLaunchArgs.get(); // ==> { permanentMockServerPort: 1234, transientArg: 'value' }\ndevice.appLaunchArgs.shared.get(); // ==> { permanentMockServerPort: 1234 }\n\nawait device.selectApp('anotherApp');\ndevice.appLaunchArgs.get(); // ==> { permanentMockServerPort: 1234 }\ndevice.appLaunchArgs.reset();\ndevice.appLaunchArgs.get(); // ==> { permanentMockServerPort: 1234 }\ndevice.appLaunchArgs.shared.reset();\ndevice.appLaunchArgs.get(); // ==> {}\n")),(0,i.yg)("p",null,"This is the most flexible way of editing the launch arguments. Refer to the ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/launch-args"},"launch arguments guide")," for complete details."),(0,i.yg)("h2",{id:"methods"},"Methods"),(0,i.yg)("h3",{id:"deviceselectappname"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.selectApp(name)")),(0,i.yg)("p",null,"Use ",(0,i.yg)("strong",{parentName:"p"},"only for advanced multi-app configs")," when you need to switch between your apps\nwithin the same test scenario. Refer to the ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/config/apps"},"configuration doc"),"\nto discover how to define multiple apps with different ",(0,i.yg)("inlineCode",{parentName:"p"},"name"),"s."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.selectApp('myAppName');\n")),(0,i.yg)("p",null,"As a side effect (due to the current architectural limitation) running ",(0,i.yg)("inlineCode",{parentName:"p"},"device.selectApp")," terminates the previous\napp that had been running before."),(0,i.yg)("h3",{id:"devicelaunchappparams"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.launchApp(params)")),(0,i.yg)("p",null,"Launch the app defined in the current ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/config/overview"},(0,i.yg)("inlineCode",{parentName:"a"},"configuration")),"."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"params"),"\u2014object, containing one of more of the following keys and values:"),(0,i.yg)("h4",{id:"1-newinstancelaunching-a-new-instance-of-the-app"},"1. ",(0,i.yg)("inlineCode",{parentName:"h4"},"newInstance"),"\u2014Launching a New Instance of the App"),(0,i.yg)("p",null,"Terminate the app and launch it again."),(0,i.yg)("p",null,"If set to ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),", the device will try to resume the app (e.g. bring from foreground to background). If the app isn\u2019t running, ",(0,i.yg)("strong",{parentName:"p"},"it will launch a new instance")," nonetheless. ",(0,i.yg)("strong",{parentName:"p"},"Default is ",(0,i.yg)("inlineCode",{parentName:"strong"},"false"),".")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({newInstance: true});\n")),(0,i.yg)("h4",{id:"2-permissionsset-runtime-permissions-ios-only"},"2. ",(0,i.yg)("inlineCode",{parentName:"h4"},"permissions"),"\u2014Set Runtime Permissions (iOS Only)"),(0,i.yg)("p",null,"Grants or denies runtime permissions to your application. This will cause the app to terminate before permissions are applied."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({permissions: {calendar: 'YES'}});\n")),(0,i.yg)("p",null,"Detox uses ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/AppleSimulatorUtils"},"AppleSimUtils")," and ",(0,i.yg)("a",{parentName:"p",href:"https://nshipster.com/simctl/"},(0,i.yg)("inlineCode",{parentName:"a"},"xcrun simctl"))," to implement this functionality for iOS simulators.\nPlease make sure you have the most recent version of both tools installed, since we rely on their latest versions."),(0,i.yg)("h5",{id:"supported-permissions"},"Supported Permissions"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Permission"),(0,i.yg)("th",{parentName:"tr",align:null},"Values"),(0,i.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"location"),(0,i.yg)("td",{parentName:"tr",align:null},"always / inuse / never / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"inuse - provides location access only when the app is in use")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"contacts"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset / limited"),(0,i.yg)("td",{parentName:"tr",align:null},"limited - grants limited access to contacts")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"photos"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset / limited"),(0,i.yg)("td",{parentName:"tr",align:null},"limited - grants limited access to photos")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"calendar"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"camera"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"medialibrary"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"microphone"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"motion"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"reminders"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"siri"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"notifications"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"Requires AppleSimUtils; unsupported by simctl")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"health"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"Requires AppleSimUtils; unsupported by simctl")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"homekit"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"Requires AppleSimUtils; unsupported by simctl")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"speech"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"Requires AppleSimUtils; unsupported by simctl")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"faceid"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"Requires AppleSimUtils; unsupported by simctl")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"userTracking"),(0,i.yg)("td",{parentName:"tr",align:null},"YES / NO / unset"),(0,i.yg)("td",{parentName:"tr",align:null},"Requires AppleSimUtils; unsupported by simctl")))),(0,i.yg)("p",null,"Check Detox's ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/blob/master/detox/test/e2e/13.permissions.test.js"},"own test suite")," for usage examples."),(0,i.yg)("h4",{id:"3-urllaunching-with-url"},"3. ",(0,i.yg)("inlineCode",{parentName:"h4"},"url"),"\u2014Launching with URL"),(0,i.yg)("p",null,"Launches the app with the specified URL to test your app\u2019s deep link handling mechanism."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({url});\nawait device.launchApp({url, newInstance: true}); // Launch a new instance of the app\nawait device.launchApp({url, newInstance: false}); // Reuse existing instance\n")),(0,i.yg)("p",null,"Read more ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/mocking-open-with-url"},"here"),". Go back to subsection 1 to read about the full effect of the ",(0,i.yg)("inlineCode",{parentName:"p"},"newInstance")," argument."),(0,i.yg)("h4",{id:"4-usernotificationlaunching-with-user-notifications"},"4. ",(0,i.yg)("inlineCode",{parentName:"h4"},"userNotification"),"\u2014Launching with User Notifications"),(0,i.yg)("p",null,"Launches with the specified user notification."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({userNotification});\nawait device.launchApp({userNotification, newInstance: true}); // Launch a new instance of the app\nawait device.launchApp({userNotification, newInstance: false}); // Reuse existing instance\n")),(0,i.yg)("p",null,"Read more ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/mocking-user-notifications"},"here"),". Go back to subsection 1 to read about the full effect of the ",(0,i.yg)("inlineCode",{parentName:"p"},"newInstance")," argument."),(0,i.yg)("h4",{id:"5-useractivitylaunch-with-user-activity-ios-only"},"5. ",(0,i.yg)("inlineCode",{parentName:"h4"},"userActivity"),"\u2014Launch with User Activity (iOS Only)"),(0,i.yg)("p",null,"Launches the app with the specified user activity."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({userActivity: activity});\nawait device.launchApp({userActivity: activity, newInstance: true}); //Launch a new instance of the app\nawait device.launchApp({userActivity: activity, newInstance: false}); //Reuse existing instance\n")),(0,i.yg)("p",null,"Read more in ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/mocking-user-activity"},"here"),". Go back to subsection 1 to read about the full effect of the ",(0,i.yg)("inlineCode",{parentName:"p"},"newInstance")," argument."),(0,i.yg)("h4",{id:"6-deletedelete-and-reinstall-application-before-launching"},"6. ",(0,i.yg)("inlineCode",{parentName:"h4"},"delete"),"\u2014Delete and Reinstall Application Before Launching"),(0,i.yg)("p",null,"Before launching the application, it is uninstalled and then reinstalled."),(0,i.yg)("p",null,"A flag that enables relaunching into a fresh installation of the app (it will uninstall and install the binary). Default is ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({delete: true});\n")),(0,i.yg)("h4",{id:"7-launchargsadditional-process-launch-arguments"},"7. ",(0,i.yg)("inlineCode",{parentName:"h4"},"launchArgs"),"\u2014Additional Process Launch Arguments"),(0,i.yg)("p",null,"Launches the app on the device with on-site, user-specified launch arguments:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'await device.launchApp({\n  launchArgs: {\n    arg1: 1,\n    arg2: "2",\n  }\n});\n')),(0,i.yg)("p",null,"This is the most explicit and straightforward way of setting launch arguments. Refer to the ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/launch-args"},"launch arguments guide")," for a complete overview on app launch arguments."),(0,i.yg)("h4",{id:"8-disabletouchindicatorsdisable-touch-indicators-ios-only"},"8. ",(0,i.yg)("inlineCode",{parentName:"h4"},"disableTouchIndicators"),"\u2014Disable Touch Indicators (iOS Only)"),(0,i.yg)("p",null,"Disables touch indicators on iOS. Default is ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({disableTouchIndicators: true});\n")),(0,i.yg)("h4",{id:"9-languageandlocalelaunch-with-a-specific-language-andor-local-ios-only"},"9. ",(0,i.yg)("inlineCode",{parentName:"h4"},"languageAndLocale"),"\u2014Launch with a Specific Language and/or Local (iOS Only)"),(0,i.yg)("p",null,"Launch the app with a specific system language"),(0,i.yg)("p",null,"Information about accepted values can be found ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html"},"here"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'await device.launchApp({\n  languageAndLocale: {\n    language: "es-MX",\n    locale: "es-MX"\n  }\n});\n')),(0,i.yg)("p",null,"With this API, you can run sets of E2E tests per language. For example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"describe.each([\n  ['es-MX'], ['fr-FR'], ['pt-BR'],\n])(`Test suite (locale: %s)`, (locale) => {\n  beforeAll(async () => {\n    await device.launchApp({\n      newInstance: true,\n      languageAndLocale: {\n        language: locale,\n        locale\n      }\n    });\n  });\n\n  test('some description', async () => {\n    // \u2026\n  });\n});\n")),(0,i.yg)("h4",{id:"10-detoxenablesynchronizationinitialize-detox-with-synchronization-enabled-or-disabled-at-app-launch"},"10. ",(0,i.yg)("inlineCode",{parentName:"h4"},"detoxEnableSynchronization"),"\u2014Initialize Detox with synchronization enabled or disabled at app launch"),(0,i.yg)("p",null,"Launches the app with the synchronization mechanism enabled or disabled. Useful if the app cannot be synchronized during the launch process. Synchronization can later be enabled using ",(0,i.yg)("inlineCode",{parentName:"p"},"device.enableSynchronization()"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({\n  newInstance: true,\n  launchArgs: { detoxEnableSynchronization: 0 }\n});\n")),(0,i.yg)("h4",{id:"11-detoxurlblacklistregexinitialize-the-url-blacklist-at-app-launch"},"11. ",(0,i.yg)("inlineCode",{parentName:"h4"},"detoxURLBlacklistRegex"),"\u2014Initialize the URL Blacklist at app launch"),(0,i.yg)("p",null,"Launches the app with a URL blacklist to disable network synchronization on certain endpoints.\nUseful if the app makes frequent network calls to blacklisted endpoints upon startup."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Note that due to the complexity of reg-exps and interoperability concerns, the implementation is fairly sensitive to the format of the string of urls.\nPlease do your best to follow the example below:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'await device.launchApp({\n  newInstance: true,\n  launchArgs: { detoxURLBlacklistRegex: \'\\\\("^http://192\\.168\\.1\\.253:\\\\d{4}/.*","https://e\\.crashlytics\\.com/spi/v2/events"\\\\)\' },\n});\n')),(0,i.yg)("h4",{id:"12-detoxdisablewebkitsecuritydisable-webkit-security-ios-only"},"12. ",(0,i.yg)("inlineCode",{parentName:"h4"},"detoxDisableWebKitSecurity"),"\u2014Disable WebKit Security (iOS Only)"),(0,i.yg)("p",null,"Disables WebKit security on iOS. Default is ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,i.yg)("p",null,"This is useful for testing web views with iframes that loads CORS-protected content."),(0,i.yg)("admonition",{title:"Important",type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Some pages may not load correctly when WebKit security is disabled (for example, PCI DSS-compliant pages).\nDisabling WebKit security may cause errors when loading pages that have strict security policies.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({\n  launchArgs: { detoxDisableWebKitSecurity: true }\n});\n")),(0,i.yg)("h3",{id:"deviceterminateapp"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.terminateApp()")),(0,i.yg)("p",null,"By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"terminateApp()")," with no params will terminate the app file defined in the current ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/config/overview"},(0,i.yg)("inlineCode",{parentName:"a"},"configuration")),"."),(0,i.yg)("p",null,"To terminate another app, specify its bundle id"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.terminateApp('other.bundle.id');\n")),(0,i.yg)("h3",{id:"devicesendtohome"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.sendToHome()")),(0,i.yg)("p",null,"Send application to background by bringing ",(0,i.yg)("inlineCode",{parentName:"p"},"com.apple.springboard")," to the foreground.\nCombining ",(0,i.yg)("inlineCode",{parentName:"p"},"sendToHome()")," with ",(0,i.yg)("inlineCode",{parentName:"p"},"launchApp({newInstance: false})")," will simulate app coming back from background.\nCheck out Detox\u2019s ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/test/e2e/06.device.test.js"},"own test suite")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.sendToHome();\nawait device.launchApp({newInstance: false});\n// app returned from background, do stuff\n")),(0,i.yg)("p",null,"Check out Detox\u2019s ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/test/e2e/06.device.test.js"},"own test suite")),(0,i.yg)("h3",{id:"devicereloadreactnative"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.reloadReactNative()")),(0,i.yg)("p",null,"If this is a React Native app, reload the React Native JS bundle. This action is much faster than ",(0,i.yg)("inlineCode",{parentName:"p"},"device.launchApp()"),", and can be used if you just need to reset your React Native logic."),(0,i.yg)("i",null,"**Note:** This functionality does not work without faults. Under certain conditions, the system may not behave as expected and/or even crash. In these cases, use `device.launchApp()` to launch the app cleanly instead of only reloading the JS bundle."),(0,i.yg)("h3",{id:"deviceinstallapp"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.installApp()")),(0,i.yg)("p",null,"By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"installApp()")," with no params will install the app file defined in the current ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/config/overview"},(0,i.yg)("inlineCode",{parentName:"a"},"configuration")),"."),(0,i.yg)("p",null,"To install another app, specify its path"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.installApp('path/to/other/app');\n")),(0,i.yg)("h3",{id:"deviceuninstallapp"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.uninstallApp()")),(0,i.yg)("p",null,"By default, ",(0,i.yg)("inlineCode",{parentName:"p"},"uninstallApp()")," with no params will uninstall the app defined in the current ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/config/overview"},(0,i.yg)("inlineCode",{parentName:"a"},"configuration")),"."),(0,i.yg)("p",null,"To uninstall another app, specify its bundle id"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.uninstallApp('other.bundle.id');\n")),(0,i.yg)("h3",{id:"deviceopenurlurl-sourceappoptional"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.openURL({url, sourceApp[optional]})")),(0,i.yg)("p",null,"Mock opening the app from URL. ",(0,i.yg)("inlineCode",{parentName:"p"},"sourceApp")," is an optional ",(0,i.yg)("strong",{parentName:"p"},"iOS-only")," parameter to specify source application bundle id."),(0,i.yg)("p",null,"Read more in ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/mocking-open-with-url"},"Mocking Open with URL")," section.\nCheck out Detox\u2019s ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/test/e2e/15.urls.test.js"},"own test suite")),(0,i.yg)("h3",{id:"devicesendusernotificationparams"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.sendUserNotification(params)")),(0,i.yg)("p",null,"Mock handling of a user notification previously received in the system, while the app is already running."),(0,i.yg)("p",null,"Read more in ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/mocking-user-notifications"},"Mocking User Notifications")," section.\nCheck out Detox\u2019s ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/test/e2e/11.user-notifications.test.js"},"own test suite")),(0,i.yg)("h3",{id:"devicesenduseractivityparams-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.sendUserActivity(params)")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Mock handling of received user activity when app is in foreground.\nRead more in ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/mocking-user-activity"},"Mocking User Activity")," section.\nCheck out Detox\u2019s ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/test/e2e/18.user-activities.test.js"},"own test suite")),(0,i.yg)("h3",{id:"devicesetorientationorientation"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.setOrientation(orientation)")),(0,i.yg)("p",null,"Takes ",(0,i.yg)("inlineCode",{parentName:"p"},'"portrait"')," or ",(0,i.yg)("inlineCode",{parentName:"p"},'"landscape"')," and rotates the device to the given orientation."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Note:")," Setting device orientation is only supported for iPhone devices, or for apps declared as requiring full screen on iPad. For all other cases, the current test will be failed."),(0,i.yg)("p",null,"Check out Detox\u2019s ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/test/e2e/06.device-orientation.test.js"},"own test suite.")),(0,i.yg)("h3",{id:"devicesetlocationlat-lon"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.setLocation(lat, lon)")),(0,i.yg)("p",null,"Sets the simulator/emulator location to the given latitude and longitude."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"On iOS ",(0,i.yg)("inlineCode",{parentName:"p"},"setLocation")," depends on ",(0,i.yg)("inlineCode",{parentName:"p"},"xcrun simctl"),", and we recommend using its latest version."),(0,i.yg)("p",{parentName:"blockquote"},"On Android ",(0,i.yg)("inlineCode",{parentName:"p"},"setLocation")," will work with both Android Emulator (bundled with Android development tools) and Genymotion. The correct permissions must be set in your app manifest.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.setLocation(32.0853, 34.7818);\n")),(0,i.yg)("h3",{id:"devicedisablesynchronization"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.disableSynchronization()")),(0,i.yg)("p",null,"Temporarily disable synchronization (idle/busy monitoring) with the app - namely, stop waiting for the app to go idle before moving forward in the test execution."),(0,i.yg)("p",null,"This API is useful for cases where test assertions must be made in an area of your application where it is okay for it to ever remain partly ",(0,i.yg)("em",{parentName:"p"},"busy")," (e.g. due to an endlessly repeating on-screen animation).\nHowever, using it inherently suggests that you are likely to resort to applying ",(0,i.yg)("inlineCode",{parentName:"p"},"sleep()"),"\u2019s in your test code - testing that area, ",(0,i.yg)("strong",{parentName:"p"},"which is not recommended and can never be 100% stable."),' Therefore, as a rule of thumb, test code running "inside" a sync-disabled mode must be reduced to the bare minimum.'),(0,i.yg)("p",null,"Note: Synchronization is enabled by default, and it gets ",(0,i.yg)("strong",{parentName:"p"},"re-enabled on every launch of a new instance of the app.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.disableSynchronization();\n")),(0,i.yg)("h3",{id:"deviceenablesynchronization"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.enableSynchronization()")),(0,i.yg)("p",null,"Re-enable synchronization (idle/busy monitoring) with the app - namely, resume waiting for the app to go idle before moving forward in the test execution, after a previous disabling of it through a call to ",(0,i.yg)("inlineCode",{parentName:"p"},"device.disableSynchronization()"),"."),(0,i.yg)("p",null,"\u26a0\ufe0f Note: Making this call would resume synchronization ",(0,i.yg)("strong",{parentName:"p"},"instantly"),", having its returned promise only resolve when the app becomes idle again. In other words, this ",(0,i.yg)("strong",{parentName:"p"},'must only be called after you navigate back to "the safe zone", where the app should be able to eventually become idle again'),', or it would remain suspended "forever" (i.e. until a safeguard time-out expires).'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.enableSynchronization();\n")),(0,i.yg)("h3",{id:"deviceseturlblacklisturls"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.setURLBlacklist([urls])")),(0,i.yg)("p",null,"Exclude synchronization with respect to network activity (i.e. don\u2019t wait for network to go idle before moving forward in the test execution) according to ",(0,i.yg)("strong",{parentName:"p"},"specific")," endpoints, denoted as URL reg-exp\u2019s. To disable endpoints at initialization, pass in the black-list as an ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/launch-args"},"app-launch argument")," named ",(0,i.yg)("inlineCode",{parentName:"p"},"detoxURLBlacklistRegex")," (as explained ",(0,i.yg)("a",{parentName:"p",href:"#11-detoxurlblacklistregexinitialize-the-url-blacklist-at-app-launch"},"here"),")."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.setURLBlacklist(['.*127.0.0.1.*', '.*my.ignored.endpoint.*']);\n")),(0,i.yg)("h3",{id:"deviceresetcontentandsettings-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.resetContentAndSettings()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Resets the Simulator to clean state (like the Simulator > Reset Content and Settings... menu item), especially removing\npreviously set permissions."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.resetContentAndSettings();\n")),(0,i.yg)("h3",{id:"devicegetplatform"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.getPlatform()")),(0,i.yg)("p",null,"Returns the current device, ",(0,i.yg)("inlineCode",{parentName:"p"},"ios")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"android"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"if (device.getPlatform() === 'ios') {\n  await expect(loopSwitch).toHaveValue('1');\n}\n")),(0,i.yg)("h3",{id:"devicetappoint-shouldignorestatusbar"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.tap(point, shouldIgnoreStatusBar)")),(0,i.yg)("p",null,"Perform a tap at arbitrary coordinates on the device's screen."),(0,i.yg)("h4",{id:"tap-parameters"},"tap parameters"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"point")," \u2014 Coordinates in the element's coordinate space (default value: ",(0,i.yg)("inlineCode",{parentName:"li"},"{x: 100, y: 100}"),", platforms: Android & IOS) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"shouldIgnoreStatusBar")," \u2014 Coordinates will be measured starting from under the status bar (default value: ",(0,i.yg)("inlineCode",{parentName:"li"},"true"),", platform: Android) ",(0,i.yg)("br",null))),(0,i.yg)("h4",{id:"tap-examples"},"tap examples"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"\nawait device.tap();\nawait device.tap({ x: 100, y: 150 }, false);\nawait device.tap({ x: 100, y: 150 });\nawait device.tap(false);\n\n")),(0,i.yg)("h3",{id:"devicelongpresspoint-duration-shouldignorestatusbar"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.longPress(point, duration, shouldIgnoreStatusBar)")),(0,i.yg)("p",null,"Perform a long press at arbitrary coordinates on the device's screen. Custom press duration if needed."),(0,i.yg)("h4",{id:"longpress-parameters"},"longPress parameters"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"point")," \u2014 Coordinates in the element's coordinate space (default value: ",(0,i.yg)("inlineCode",{parentName:"li"},"{x: 100, y: 100}"),", platforms: Android & IOS) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"duration")," \u2014 Custom press duration time, in milliseconds. (default values: Android: Standard long-press duration.  IOS: 1000 milliseconds, platforms: Android & IOS) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"shouldIgnoreStatusBar")," \u2014 Coordinates will be measured starting from under the status bar (default value: ",(0,i.yg)("inlineCode",{parentName:"li"},"true"),", platform: Android) ",(0,i.yg)("br",null))),(0,i.yg)("h4",{id:"longpress-examples"},"longPress examples"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"\nawait device.longPress();\nawait device.longPress({ x: 100, y: 150 }, 2000, false);\nawait device.longPress({ x: 100, y: 150 }, 2000);\nawait device.longPress(2000, false);\nawait device.longPress({ x: 100, y: 150 }, false);\nawait device.longPress({ x: 100, y: 150 });\nawait device.longPress(2000);\nawait device.longPress(false);\n\n")),(0,i.yg)("h3",{id:"devicetakescreenshotname"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.takeScreenshot([name])")),(0,i.yg)("p",null,"Takes a screenshot of the device. For full details on taking screenshots with Detox, refer to the ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/taking-screenshots"},"screen-shots guide"),"."),(0,i.yg)("h3",{id:"devicecaptureviewhierarchyname"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.captureViewHierarchy([name])")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"iOS Only.")," Saves a view hierarchy snapshot (",(0,i.yg)("inlineCode",{parentName:"p"},"*.viewhierarchy"),") of the\ncurrently opened application to a temporary folder and schedules putting it to\nthe artifacts' folder upon the completion of the current test. The file can be\nopened later in Xcode 12.0 and above.\nSee ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/xcode-release-notes/xcode-12-release-notes#:~:text=57933113"},"Xcode 12 Release notes: #57933113"),"\nfor more details."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"name")," parameter is optional \u2014\xa0by default, it equals to ",(0,i.yg)("inlineCode",{parentName:"p"},"capture"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"test('Capture view hierarchy', async () => {\n  const temporaryArtifactPath = await device.captureViewHierarchy('myElements');\n\n  // The temporary path will remain valid until the test completion.\n  // Afterwards, the artifact will be moved, e.g.:\n  // * on success, to: <artifacts-location>/\u2713 Capture view hierarchy/myElements.viewhierarchy\n  // * on failure, to: <artifacts-location>/\u2717 Capture view hierarchy/myElements.viewhierarchy\n});\n")),(0,i.yg)("h3",{id:"devicegenerateviewhierarchyxmlshouldinjecttestids"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.generateViewHierarchyXml([shouldInjectTestIds])")),(0,i.yg)("p",null,"Generates a view hierarchy XML of the currently opened application. The XML is returned as a string."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"shouldInjectTestIds")," parameter is optional and defaults to ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),". When set to ",(0,i.yg)("inlineCode",{parentName:"p"},"true"),", Detox will attempt to inject ",(0,i.yg)("inlineCode",{parentName:"p"},"testID")," attributes into the XML for each element if undefined."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"const viewHierarchyXml = await device.generateViewHierarchyXml();\n")),(0,i.yg)("h3",{id:"deviceshake-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.shake()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Simulate shake"),(0,i.yg)("h3",{id:"devicesetbiometricenrollmentbool-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.setBiometricEnrollment(bool)")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Toggles device enrollment in biometric authentication (Touch ID or Face ID)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.setBiometricEnrollment(true);\n// or\nawait device.setBiometricEnrollment(false);\n")),(0,i.yg)("h3",{id:"devicematchface-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.matchFace()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Simulates the success of a face match via Face ID"),(0,i.yg)("h3",{id:"deviceunmatchface-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.unmatchFace()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Simulates the failure of face match via Face ID"),(0,i.yg)("h3",{id:"devicematchfinger-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.matchFinger()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Simulates the success of a finger match via Touch ID"),(0,i.yg)("h3",{id:"deviceunmatchfinger-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.unmatchFinger()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Simulates the failure of a finger match via Touch ID"),(0,i.yg)("h3",{id:"deviceclearkeychain-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.clearKeychain()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Clears the device keychain"),(0,i.yg)("h3",{id:"devicesetstatusbar-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.setStatusBar()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Override simulator\u2019s status bar. Available options:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.setStatusBar({\n  time: \"12:34\",\n  // Set the date or time to a fixed value.\n  // If the string is a valid ISO date string it will also set the date on relevant devices.\n  dataNetwork: \"wifi\",\n  // If specified must be one of 'hide', 'wifi', '3g', '4g', 'lte', 'lte-a', 'lte+', '5g', '5g+', '5g-uwb', or '5g-uc'.\n  wifiMode: \"failed\",\n  // If specified must be one of 'searching', 'failed', or 'active'.\n  wifiBars: \"2\",\n  // If specified must be 0-3.\n  cellularMode: \"searching\",\n  // If specified must be one of 'notSupported', 'searching', 'failed', or 'active'.\n  cellularBars: \"3\",\n  // If specified must be 0-4.\n  operatorName: \"A1\",\n  // Set the cellular operator/carrier name. Use '' for the empty string.\n  batteryState: \"charging\",\n  // If specified must be one of 'charging', 'charged', or 'discharging'.\n  batteryLevel: \"50\",\n  // If specified must be 0-100.\n});\n")),(0,i.yg)("h3",{id:"deviceresetstatusbar-ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.resetStatusBar()")," ",(0,i.yg)("strong",{parentName:"h3"},"iOS Only")),(0,i.yg)("p",null,"Resets any override in simulator\u2019s status bar."),(0,i.yg)("h3",{id:"devicereversetcpport-android-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.reverseTcpPort()")," ",(0,i.yg)("strong",{parentName:"h3"},"Android Only")),(0,i.yg)("p",null,"Reverse a TCP port from the device (guest) back to the host-computer, as typically done with the ",(0,i.yg)("inlineCode",{parentName:"p"},"adb reverse")," command. The end result would be that all network requests going from the device to the specified port will be forwarded to the computer."),(0,i.yg)("h3",{id:"deviceunreversetcpport-android-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.unreverseTcpPort()")," ",(0,i.yg)("strong",{parentName:"h3"},"Android Only")),(0,i.yg)("p",null,"Clear a ",(0,i.yg)("em",{parentName:"p"},"reversed")," TCP-port (e.g. previously set using ",(0,i.yg)("inlineCode",{parentName:"p"},"device.reverseTcpPort()"),")."),(0,i.yg)("h3",{id:"devicepressback-android-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.pressBack()")," ",(0,i.yg)("strong",{parentName:"h3"},"Android Only")),(0,i.yg)("p",null,"Simulate press back button."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await device.pressBack();\n")),(0,i.yg)("h3",{id:"devicegetuidevice-android-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"device.getUiDevice()")," ",(0,i.yg)("strong",{parentName:"h3"},"Android Only")),(0,i.yg)("p",null,"Exposes ",(0,i.yg)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice"},(0,i.yg)("inlineCode",{parentName:"a"},"UiAutomator"),"\u2019s ",(0,i.yg)("inlineCode",{parentName:"a"},"UiDevice")," API"),".\n",(0,i.yg)("strong",{parentName:"p"},"This is not a part of the official Detox API"),", it may break and change whenever an update to ",(0,i.yg)("inlineCode",{parentName:"p"},"UiDevice")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"UiAutomator")," Gradle dependencies (",(0,i.yg)("inlineCode",{parentName:"p"},"androidx.test.uiautomator:uiautomator"),") is introduced."),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/tree/a9a09246c05733f6b91cfcc0dba05a4714abca92/detox/src/android/espressoapi/UIDevice.js"},(0,i.yg)("inlineCode",{parentName:"a"},"UiDevice"),"\u2019s autogenerated code")))}u.isMDXComponent=!0}}]);