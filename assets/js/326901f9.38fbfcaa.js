"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8769],{15680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>c});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){a(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef(function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,c=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(c,i(i({ref:t},g),{},{components:n})):r.createElement(c,i({ref:t},g))});function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(58168),a=(n(96540),n(15680));const o={},i="Wix Pilot",l={unversionedId:"api/pilot",id:"api/pilot",title:"Wix Pilot",description:"Wix Pilot is an AI-powered plugin that allows you to write tests using natural language commands, powered by large language models (LLMs). It simplifies the process of writing end-to-end tests by translating human-readable instructions into actions and assertions.",source:"@site/../docs/api/pilot.md",sourceDirName:"api",slug:"/api/pilot",permalink:"/Detox/docs/next/api/pilot",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/api/pilot.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Logger",permalink:"/Detox/docs/next/api/logger"},next:{title:"Internals API",permalink:"/Detox/docs/next/api/internals"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>pilot.init(promptHandler)</code>",id:"pilotinitprompthandler",level:2},{value:"<code>pilot.perform(...steps)</code>",id:"pilotperformsteps",level:2},{value:"<code>pilot.autopilot(goal)</code>",id:"pilotautopilotgoal",level:2},{value:"<code>PromptHandler</code> Interface",id:"prompthandler-interface",level:2}],g={toc:s},m="wrapper";function u({components:e,...t}){return(0,a.yg)(m,(0,r.A)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"wix-pilot"},"Wix Pilot"),(0,a.yg)("p",null,"Wix Pilot is an AI-powered plugin that allows you to write tests using natural language commands, powered by large language models (LLMs). It simplifies the process of writing end-to-end tests by translating human-readable instructions into actions and assertions."),(0,a.yg)("admonition",{title:"Work in Progress",type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Wix Pilot is in active development, and APIs are subject to change in future releases.")),(0,a.yg)("admonition",{title:"Migration Notice",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"With the introduction of ",(0,a.yg)("strong",{parentName:"p"},"Wix Pilot"),", the ",(0,a.yg)("inlineCode",{parentName:"p"},"copilot")," API is now deprecated."),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Wix Pilot")," is a standalone plugin that enables natural language-based testing and can work across different testing frameworks."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Detox Pilot")," is a built-in facade within Detox that leverages Wix Pilot for Detox-specific testing.")),(0,a.yg)("p",{parentName:"admonition"},"From now on, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"pilot")," API. The ",(0,a.yg)("inlineCode",{parentName:"p"},"copilot")," API will remain temporarily supported for backward compatibility but will be removed in future releases.")),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"Detox Pilot exposes a simple API that integrates seamlessly with your Detox tests. It requires minimal setup and allows you to perform complex testing operations by simply describing them in natural language."),(0,a.yg)("p",null,"For a more detailed guide on integrating Wix Pilot in your tests, refer to the ","[","Detox Pilot Guide]."),(0,a.yg)("h2",{id:"methods"},"Methods"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#pilotinitprompthandler"},(0,a.yg)("inlineCode",{parentName:"a"},"pilot.init()"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#pilotperformsteps"},(0,a.yg)("inlineCode",{parentName:"a"},"pilot.perform()"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#pilotautopilotgoal"},(0,a.yg)("inlineCode",{parentName:"a"},"pilot.autopilot()")))),(0,a.yg)("h2",{id:"pilotinitprompthandler"},(0,a.yg)("inlineCode",{parentName:"h2"},"pilot.init(promptHandler)")),(0,a.yg)("p",null,"Initializes Pilot with the given prompt handler. Must be called before any other Pilot methods."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"promptHandler")," (PromptHandler): An object implementing the ",(0,a.yg)("a",{parentName:"li",href:"#prompthandler-interface"},(0,a.yg)("inlineCode",{parentName:"a"},"PromptHandler"))," interface.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const { pilot } = require('detox');\nconst OpenAIPromptHandler = require('./OpenAIPromptHandler');\n\nbeforeAll(() => {\n  const promptHandler = new OpenAIPromptHandler('YOUR_OPENAI_API_KEY');\n  pilot.init(promptHandler);\n});\n")),(0,a.yg)("h2",{id:"pilotperformsteps"},(0,a.yg)("inlineCode",{parentName:"h2"},"pilot.perform(...steps)")),(0,a.yg)("p",null,"Performs a testing operation or series of operations based on the given steps."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"steps")," (string","[","]): One or more natural language instructions specifying the actions or assertions to perform.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A promise that resolves when all steps have been executed.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"await pilot.perform(\n  'Start the application',\n  'Tap on the \"Login\" button',\n  'Enter \"user@example.com\" into the email field',\n  'Enter \"password123\" into the password field',\n  'Press the \"Submit\" button',\n  'The welcome message \"Hello, User!\" should be displayed'\n);\n")),(0,a.yg)("h2",{id:"pilotautopilotgoal"},(0,a.yg)("inlineCode",{parentName:"h2"},"pilot.autopilot(goal)")),(0,a.yg)("p",null,"Automatically generates a series of steps to achieve the given goal."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"goal")," (string): A natural language description of the desired outcome.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"await pilot.autoPilot('Log in and navigate to the profile page');\n")),(0,a.yg)("h2",{id:"prompthandler-interface"},(0,a.yg)("inlineCode",{parentName:"h2"},"PromptHandler")," Interface"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"PromptHandler")," interface defines how Pilot communicates with the LLM service."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"interface PromptHandler {\n  /**\n   * Sends a prompt to the LLM service and returns the response.\n   * @param prompt The prompt to send.\n   * @param image Optional path to an image capturing the current UI state.\n   * @returns A promise resolving to the LLM's response.\n   */\n  runPrompt(prompt: string, image?: string): Promise<string>;\n\n  /**\n   * Indicates whether the LLM service supports snapshot images.\n   * @returns A boolean value.\n   */\n  isSnapshotImageSupported(): boolean;\n}\n")),(0,a.yg)("p",null,"You can refer to the ","[Pilot Guide]"," for an example of implementing a ",(0,a.yg)("inlineCode",{parentName:"p"},"PromptHandler")," for OpenAI's service."))}u.isMDXComponent=!0}}]);