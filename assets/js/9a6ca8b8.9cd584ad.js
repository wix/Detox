"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[289],{18918:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(58168),i=(a(96540),a(15680)),r=a(53846);const l={},o="Artifacts",s={unversionedId:"config/artifacts",id:"version-20.x/config/artifacts",title:"Artifacts",description:"This article is incomplete. We're looking forward to improve this article as soon as we have an opportunity to do so.",source:"@site/versioned_docs/version-20.x/config/artifacts.mdx",sourceDirName:"config",slug:"/config/artifacts",permalink:"/Detox/docs/config/artifacts",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/versioned_docs/version-20.x/config/artifacts.mdx",tags:[],version:"20.x",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Apps",permalink:"/Detox/docs/config/apps"},next:{title:"Behavior",permalink:"/Detox/docs/config/behavior"}},g={},p=[{value:"Location",id:"location",level:2},{value:"Example",id:"example",level:2},{value:"Enabling Artifacts",id:"enabling-artifacts",level:2},{value:"Launch Arguments",id:"launch-arguments",level:3},{value:"Artifacts root directory",id:"artifacts-root-directory",level:4},{value:"Configuration Object",id:"configuration-object",level:3},{value:"Path builder",id:"path-builder",level:4},{value:"Screenshot Plugin",id:"screenshot-plugin",level:4},{value:"Video Plugin",id:"video-plugin",level:4},{value:"Log Plugin",id:"log-plugin",level:4},{value:"Instruments Plugin",id:"instruments-plugin",level:4},{value:"UI hierarchy Plugin",id:"ui-hierarchy-plugin",level:4},{value:"Artifacts Structure",id:"artifacts-structure",level:2},{value:"Example of the structure",id:"example-of-the-structure",level:3}],d={toc:p},c="wrapper";function u({components:e,...t}){return(0,i.yg)(c,(0,n.A)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"artifacts"},"Artifacts"),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"This article is incomplete. We're looking forward to improve this article as soon as we have an opportunity to do so.")),(0,i.yg)("p",null,"Detox can store artifacts such as transient screenshots and device logs."),(0,i.yg)("h2",{id:"location"},"Location"),(0,i.yg)(r.Ay,{sectionName:"artifacts",mdxType:"Location"}),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("p",null,"You can control artifacts collection via Detox configuration:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'{\n  "artifacts": {\n    "rootDir": ".artifacts",\n    "pathBuilder": "./config/pathbuilder.js",\n    "plugins": {\n      "instruments": {"enabled": false},\n      "log": {"enabled": true},\n      "uiHierarchy": "enabled",\n      "screenshot": {\n        "shouldTakeAutomaticSnapshots": true,\n        "keepOnlyFailedTestsArtifacts": true,\n        "takeWhen": {\n          "testStart": false,\n          "testDone": true\n        }\n      },\n      "video": {\n        "android": {\n          "bitRate": 4000000\n        },\n        "simulator": {\n          "codec": "hevc"\n        }\n      }\n    }\n  },\n  "configurations": {\n    "ios.sim.release": {\n      // ...\n      "artifacts": {\n        "rootDir": ".artifacts/ios",\n        "plugins": {\n          "instruments": "all"\n        }\n      }\n    }\n  }\n}\n')),(0,i.yg)("p",null,"As can be seen from the example above, in a specific configuration you may override individual properties from the default artifacts\nconfiguration. For instance, in the example above you can see that specifically in ",(0,i.yg)("inlineCode",{parentName:"p"},"ios.sim.release")," we turn on ",(0,i.yg)("inlineCode",{parentName:"p"},"instruments")," plugin."),(0,i.yg)("p",null,"CLI arguments (e.g., ",(0,i.yg)("inlineCode",{parentName:"p"},"--artifacts-location"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"--record-logs"),") still have the highest priority and override their counterparts from JSON."),(0,i.yg)("p",null,"Also, that example demonstrates that you can use strings (identical to the ones from CLI) in parallel to the object configurations for plugins.\nBelow you can see mappings between the string presets and the corresponding objects:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"preset"),(0,i.yg)("th",{parentName:"tr",align:null},"object"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"none"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},'{ "enabled": false }'))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"all"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},'{ "enabled": true }'))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"failing"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},'{ "enabled": true, "keepOnlyFailedTestsArtifacts": true }'))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"manual"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},'{ "enabled": true, "shouldTakeAutomaticSnapshots": false }'))))),(0,i.yg)("p",null,"There is also a shortcut to disable artifacts for a specific configuration:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'{\n  "configurations": {\n    "ios.no-artifacts": {\n      // ...\n      "artifacts": false\n    }\n  }\n}\n')),(0,i.yg)("p",null,"Artifacts are various recordings during tests including, but not limited to, device logs, device screenshots and screen recordings (videos)."),(0,i.yg)("h2",{id:"enabling-artifacts"},"Enabling Artifacts"),(0,i.yg)("p",null,"Artifacts are disabled by default. To enable them, specify via ",(0,i.yg)("strong",{parentName:"p"},"launch arguments")," or a ",(0,i.yg)("strong",{parentName:"p"},"configuration")," object what artifacts you want to record."),(0,i.yg)("h3",{id:"launch-arguments"},"Launch Arguments"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"To record ",(0,i.yg)("inlineCode",{parentName:"li"},".log")," files, add ",(0,i.yg)("inlineCode",{parentName:"li"},"--record-logs all")," (or ",(0,i.yg)("inlineCode",{parentName:"li"},"--record-logs failing"),", if you want to keep logs only for failing tests)."),(0,i.yg)("li",{parentName:"ul"},"To record ",(0,i.yg)("inlineCode",{parentName:"li"},".mp4")," test run videos, add ",(0,i.yg)("inlineCode",{parentName:"li"},"--record-videos all")," (or ",(0,i.yg)("inlineCode",{parentName:"li"},"--record-videos failing"),", if you want to keep video recordings only for failing tests)."),(0,i.yg)("li",{parentName:"ul"},"To record ",(0,i.yg)("inlineCode",{parentName:"li"},".dtxrec")," (Detox Instruments recordings) for each test, add ",(0,i.yg)("inlineCode",{parentName:"li"},"--record-performance all"),". To open those recordings, you\u2019ll need ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/wix/DetoxInstruments"},"Detox Instruments"),". ",(0,i.yg)("strong",{parentName:"li"},"NOTE:")," only iOS is supported."),(0,i.yg)("li",{parentName:"ul"},"To capture ",(0,i.yg)("inlineCode",{parentName:"li"},".uihierarchy")," snapshots (",(0,i.yg)("strong",{parentName:"li"},"iOS only, Xcode 12.0+"),") on view action failures, add ",(0,i.yg)("inlineCode",{parentName:"li"},"--capture-view-hierarchy enabled"),"."),(0,i.yg)("li",{parentName:"ul"},"To take ",(0,i.yg)("inlineCode",{parentName:"li"},".png")," screenshots before and after each test, add ",(0,i.yg)("inlineCode",{parentName:"li"},"--take-screenshots all")," (or ",(0,i.yg)("inlineCode",{parentName:"li"},"--take-screenshots failing"),", if you want to keep only screenshots of failing tests).\\\nAlternatively, you might leverage the ",(0,i.yg)("a",{parentName:"li",href:"/Detox/docs/api/device#devicetakescreenshotname"},"device.takeScreenshot()")," API for manual control.")),(0,i.yg)("h4",{id:"artifacts-root-directory"},"Artifacts root directory"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"To change artifacts root directory location (by default it is ",(0,i.yg)("inlineCode",{parentName:"li"},"./artifacts"),"), add ",(0,i.yg)("inlineCode",{parentName:"li"},"--artifacts-location <path>"),".\\\n",(0,i.yg)("strong",{parentName:"li"},"NOTE:")," There is a slightly obscure convention. If you want to create automatically a subdirectory with timestamp and configuration name (to avoid file overwrites upon consequent reruns), specify a path to directory that does not end with a slash. Otherwise, if you want to put artifacts straight to the specified directory (in a case where you make a single run only, e.g. on CI), add a slash (or a backslash) to the end.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"detox test --artifacts-location /tmp/detox_artifacts  # will also append /android.emu.release.2018-06-14 08:54:11Z\ndetox test --artifacts-location /tmp/detox_artifacts/ # won\u2019t append anything, hereby treating it as a root\n")),(0,i.yg)("h3",{id:"configuration-object"},"Configuration Object"),(0,i.yg)("p",null,"Detox artifacts can be configured in a more advanced way with the ",(0,i.yg)("inlineCode",{parentName:"p"},"artifacts")," configuration in ",(0,i.yg)("inlineCode",{parentName:"p"},"package.json")," (or ",(0,i.yg)("inlineCode",{parentName:"p"},".detoxrc"),"):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "artifacts": {},\n  "configurations": {\n    "some.device": {\n      "artifacts": {},\n    },\n  },\n}\n')),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"NOTE:")," As you can see, there is a global and a local (per-configuration) configuration of the artifacts.\nDetox merges those configurations, and the per-device artifacts configuration has a higher priority over the general one."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"artifacts")," object has the following properties:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Property"),(0,i.yg)("th",{parentName:"tr",align:null},"Example values"),(0,i.yg)("th",{parentName:"tr",align:null},"Default value"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"rootDir"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},'".artifacts/"')),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"./artifacts")),(0,i.yg)("td",{parentName:"tr",align:null},"A directory, where all the recorded artifacts will be placed in. Please note that there is a trailing slash convention ",(0,i.yg)("a",{parentName:"td",href:"#artifacts-root-directory"},"described above"),".")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"pathBuilder"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},'"./e2e/config/pathbuilder.js"')),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"undefined")),(0,i.yg)("td",{parentName:"tr",align:null},"Path to a module that exports a custom ",(0,i.yg)("inlineCode",{parentName:"td"},"PathBuilder")," ",(0,i.yg)("a",{parentName:"td",href:"#path-builder"},"\u1d43"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"plugins"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"{ ... }")),(0,i.yg)("td",{parentName:"tr",align:null},"... see below"),(0,i.yg)("td",{parentName:"tr",align:null},"... see below")))),(0,i.yg)("h4",{id:"path-builder"},"Path builder"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"\u1d43")," ",(0,i.yg)("inlineCode",{parentName:"p"},"PathBuilder")," should be either an ",(0,i.yg)("em",{parentName:"p"},"object")," with a method ",(0,i.yg)("inlineCode",{parentName:"p"},"buildPathForTestArtifact")," or a ",(0,i.yg)("em",{parentName:"p"},"class")," \u2014 see the corresponding interfaces below:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface PathBuilder {\n    buildPathForTestArtifact(artifactPath: string, testSummary?: TestSummary): string;\n}\n\ninterface PathBuilderClass {\n    new(opts: { rootDir: string; }): PathBuilder;\n}\n")),(0,i.yg)("p",null,"As one can see, if a custom implementation of ",(0,i.yg)("inlineCode",{parentName:"p"},"PathBuilder")," exports a class instead of an object, then the class constructor can also get and save ",(0,i.yg)("inlineCode",{parentName:"p"},"rootDir")," location:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"class MyPathBuilder {\n  constructor({ rootDir }) {\n    this._rootDir = rootDir;\n  }\n\n  buildPathForTestArtifact(artifactName, testSummary) {\n    /* ... use this._rootDir ... */\n  }\n}\n\nmodule.exports = MyPathBuilder;\n")),(0,i.yg)("p",null,"Its main method, ",(0,i.yg)("inlineCode",{parentName:"p"},"buildPathForTestArtifact")," should return a full path to the custom artifact location, when called with a suggested artifact name (e.g., ",(0,i.yg)("inlineCode",{parentName:"p"},"testDone.png"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"device.log"),") and the current ",(0,i.yg)("inlineCode",{parentName:"p"},"TestSummary"),", where ",(0,i.yg)("inlineCode",{parentName:"p"},"TestSummary")," is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface TestSummary {\n    /**\n     * Name of the current test, e.g., for:\n     * describe('that screen', () =>\n     *   it('should have a menu', () =>\n     * The expected string would be: \"should have a menu\".\n     */\n    title: string;\n    /**\n     * Full name of the current test, usually preceded by a suite name, e.g.:\n     * describe('that screen', () =>\n     *   it('should have a menu', () =>\n     * The expected string would be: \"that screen should have a menu\".\n     */\n    fullName: string;\n    /**\n     * Status of the current test. Free-form strings are not allowed.\n     */\n    status: 'running' | 'passed' | 'failed';\n    /**\n     * Clarifies the reason for why the test has failed.\n     * Expected to coincide only with status: 'failed'.\n     */\n    timedOut?: boolean;\n    /**\n     * If the test runner is capable of retrying failed tests, then\n     * this property indicates for which time this test is running.\n     * When the property is undefined, its value is considered to be 1.\n     * */\n    invocations?: number;\n}\n")),(0,i.yg)("p",null,"For more technical details, search for ",(0,i.yg)("inlineCode",{parentName:"p"},"ArtifactPathBuilder.js")," in Detox source code."),(0,i.yg)("p",null,"The further subsections describe the ",(0,i.yg)("inlineCode",{parentName:"p"},"plugins")," object structure."),(0,i.yg)("h4",{id:"screenshot-plugin"},"Screenshot Plugin"),(0,i.yg)("p",null,"Below is a default screenshot plugin object configuration, which is loaded implicitly and corresponds to the ",(0,i.yg)("inlineCode",{parentName:"p"},"manual")," preset:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": {\n    "screenshot": {\n      "enabled": true,\n      "shouldTakeAutomaticSnapshots": false,\n      "keepOnlyFailedTestsArtifacts": false,\n      "takeWhen": {\n        "testStart": true,\n        "testDone": true,\n        "appNotReady": true,\n      },\n    }\n  }\n}\n')),(0,i.yg)("p",null,"The other string presets override the following properties compared to the default configuration:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"none")," => ",(0,i.yg)("inlineCode",{parentName:"li"},"{ enabled: false }"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"failing")," => ",(0,i.yg)("inlineCode",{parentName:"li"},"{ shouldTakeAutomaticSnapshots: true, keepOnlyFailedTestsArtifacts: true }"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"all")," => ",(0,i.yg)("inlineCode",{parentName:"li"},"{ shouldTakeAutomaticSnapshots: true, keepOnlyFailedTestsArtifacts: false }"))),(0,i.yg)("p",null,"The individual property behavior is the following:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"enabled")," is ",(0,i.yg)("em",{parentName:"li"},"false"),", then the screenshots will never be saved to the artifacts' folder."),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"shouldTakeAutomaticSnapshots")," is ",(0,i.yg)("em",{parentName:"li"},"false"),", then no one of the events described in ",(0,i.yg)("inlineCode",{parentName:"li"},"takeWhen")," object is going to trigger a screenshot."),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"keepOnlyFailedTestsArtifacts")," is ",(0,i.yg)("em",{parentName:"li"},"true"),", then only screenshots from a failed test will be saved to the artifacts folder."),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"takeWhen")," is ",(0,i.yg)("em",{parentName:"li"},"undefined"),", it is going to have the default value described above (all props are true)."),(0,i.yg)("li",{parentName:"ul"},"If ",(0,i.yg)("inlineCode",{parentName:"li"},"takeWhen")," is set to be an empty object ",(0,i.yg)("inlineCode",{parentName:"li"},"{}"),", that is equivalent to:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "testStart": false,\n  "testDone": false,\n  "appNotReady": true,\n}\n')),(0,i.yg)("p",null,"Hence, for example, if you wish to enable only ",(0,i.yg)("inlineCode",{parentName:"p"},"testDone")," screenshots and leave taking ",(0,i.yg)("inlineCode",{parentName:"p"},"appNotReady")," screenshots as-is, you have to pass:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "artifacts": {\n    "plugins": {\n      "screenshot": {\n        "takeWhen": { "testDone": true }\n      }\n    }\n  }\n}\n')),(0,i.yg)("h4",{id:"video-plugin"},"Video Plugin"),(0,i.yg)("p",null,"To be done. See meanwhile the example ",(0,i.yg)("a",{parentName:"p",href:"#artifacts"},"above"),"."),(0,i.yg)("h4",{id:"log-plugin"},"Log Plugin"),(0,i.yg)("p",null,"To be done. See meanwhile the example ",(0,i.yg)("a",{parentName:"p",href:"#artifacts"},"above"),"."),(0,i.yg)("h4",{id:"instruments-plugin"},"Instruments Plugin"),(0,i.yg)("p",null,"To be done. See meanwhile the example ",(0,i.yg)("a",{parentName:"p",href:"#artifacts"},"above"),"."),(0,i.yg)("h4",{id:"ui-hierarchy-plugin"},"UI hierarchy Plugin"),(0,i.yg)("p",null,"To be done. See meanwhile the example ",(0,i.yg)("a",{parentName:"p",href:"#artifacts"},"above"),"."),(0,i.yg)("h2",{id:"artifacts-structure"},"Artifacts Structure"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Artifacts root folder")," is created per detox test run. If, for instance,",(0,i.yg)("inlineCode",{parentName:"p"},"--artifacts-location /tmp")," is used with ",(0,i.yg)("inlineCode",{parentName:"p"},"--configuration ios.sim.release")," configuration on 14th June 2018 at 11:02:11 GMT+02, then the folder ",(0,i.yg)("inlineCode",{parentName:"p"},"/tmp/ios.sim.release.2018-06-14 09:02:11Z")," is created.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Test folder")," is created per test inside the root folder. The folder name consists of the test number, and the test\u2019s full name provided to ",(0,i.yg)("inlineCode",{parentName:"p"},"detox.afterEach(testSummary)")," as explained above and in ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/api/logger"},"detox object")," documentation. For instance, for the above example, the following folders will be created inside ",(0,i.yg)("inlineCode",{parentName:"p"},"/tmp/ios.sim.release.2018-06-14 09:02:11Z"),":"),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-plain",metastring:"text",text:!0},"\u2717 Assertions should assert an element has (accessibility)\n\u2713 Network Synchronization Sync with short network requests - 100ms\n"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Artifacts files")," are created inside the test folders. The files suffixes stand for the files types (currently there are .err.log and .out.log), and the files prefixes are the launch numbers of the application per test (if the app was executed more than once per test, you will have several artifacts of each type - one per launch). For instance, a test folder may contain the following artifacts files:"),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-plain",metastring:"text",text:!0},"test.log\ntest.mp4\ntest.dtxrec/\nbeforeEach.png\nafterEach.png\n")))),(0,i.yg)("h3",{id:"example-of-the-structure"},"Example of the structure"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-plain",metastring:"text",text:!0},"artifacts/android.emu.release.2018-06-12 06:36:18Z/startup.log\nartifacts/android.emu.release.2018-06-12 06:36:18Z/\u2717 Assertions should assert an element has (accessibility) id/beforeEach.png\nartifacts/android.emu.release.2018-06-12 06:36:18Z/\u2717 Assertions should assert an element has (accessibility) id/test.log\nartifacts/android.emu.release.2018-06-12 06:36:18Z/\u2717 Assertions should assert an element has (accessibility) id/test.mp4\nartifacts/android.emu.release.2018-06-12 06:36:18Z/\u2717 Assertions should assert an element has (accessibility) id/afterEach.png\n")))}u.isMDXComponent=!0},53846:(e,t,a)=>{a.d(t,{Ay:()=>s});var n=a(58168),i=(a(96540),a(15680)),r=a(22355);const l={toc:[]},o="wrapper";function s({components:e,...t}){return(0,i.yg)(o,(0,n.A)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"You can define the ",(0,i.yg)("code",null,t.sectionName)," config section in two ways: ",(0,i.yg)("i",null,"globally")," and ",(0,i.yg)("i",null,"locally")," (per a configuration):"),(0,i.yg)(r.A,{title:".detoxrc.js",language:"javascript",mdxType:"CodeBlock"},["/** @type {Detox.DetoxConfig} */","module.exports = {","// highlight-start",`  ${t.sectionName}: {`,"    /* global section */","  },","// highlight-end","  devices: { /* \u2026 */ },","  apps: { /* \u2026 */ },","  configurations: {","    'ios.sim.debug': {","      device: 'iphone',","      app: 'ios.debug',","// highlight-start",`      ${t.sectionName}: {`,"        /* local (per-configuration) section */","      },","// highlight-end","    },","  },","};"].join("\n")))}s.isMDXComponent=!0}}]);