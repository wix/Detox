"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8634],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function p(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef(function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=l(t),m=r,d=s["".concat(c,".").concat(m)]||s[m]||g[m]||o;return t?i.createElement(d,a(a({ref:n},u),{},{components:t})):i.createElement(d,a({ref:n},u))});function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[s]="string"==typeof e?e:r,a[1]=p;for(var l=2;l<o;l++)a[l]=t[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},62532:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var i=t(58168),r=(t(96540),t(15680));const o={id:"mocking-open-with-url",slug:"api/mocking-open-with-url",title:"Mocking Open With URL (Deep Links)",sidebar_label:"Mocking Open With URL (Deep Links)"},a=void 0,p={unversionedId:"mocking-open-with-url",id:"version-19.x/mocking-open-with-url",title:"Mocking Open With URL (Deep Links)",description:"Mocking Open With URL (Deep Links)",source:"@site/versioned_docs/version-19.x/APIRef.MockingOpenWithURL.md",sourceDirName:".",slug:"/api/mocking-open-with-url",permalink:"/Detox/docs/19.x/api/mocking-open-with-url",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/versioned_docs/version-19.x/APIRef.MockingOpenWithURL.md",tags:[],version:"19.x",frontMatter:{id:"mocking-open-with-url",slug:"api/mocking-open-with-url",title:"Mocking Open With URL (Deep Links)",sidebar_label:"Mocking Open With URL (Deep Links)"},sidebar:"tutorialSidebar",previous:{title:"Launch Arguments",permalink:"/Detox/docs/19.x/api/launch-args"},next:{title:"Mocking User Notifications",permalink:"/Detox/docs/19.x/api/mocking-user-notifications"}},c={},l=[{value:"Mocking Open With URL (Deep Links)",id:"mocking-open-with-url-deep-links",level:2},{value:"Mocking App Launch With a URL",id:"mocking-app-launch-with-a-url",level:3},{value:"Example",id:"example",level:4},{value:"Mocking Opening With a URL On a Launched App",id:"mocking-opening-with-a-url-on-a-launched-app",level:3}],u={toc:l},s="wrapper";function g({components:e,...n}){return(0,r.yg)(s,(0,i.A)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"mocking-open-with-url-deep-links"},"Mocking Open With URL (Deep Links)"),(0,r.yg)("p",null,"You can mock opening the app from URL to test your app\u2019s deep link handling mechanism."),(0,r.yg)("h3",{id:"mocking-app-launch-with-a-url"},"Mocking App Launch With a URL"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({newInstance: true, url, sourceApp: bundleId}); // sourceApp is an optional iOS-only argument\n")),(0,r.yg)("h4",{id:"example"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"describe('launch app from URL', () => {\n    it('should handle URL successfully', async () => {\n      await device.launchApp({\n        newInstance: true,\n        url: 'scheme://some.url',\n        sourceApp: 'com.apple.mobilesafari'\n      });\n      await expect(element(by.text('a label'))).toBeVisible();\n    });\n  });\n")),(0,r.yg)("h3",{id:"mocking-opening-with-a-url-on-a-launched-app"},"Mocking Opening With a URL On a Launched App"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"iOS-only")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"await device.openURL({url: 'scheme://some.url', sourceApp: 'com.apple.mobilesafari'});\n")))}g.isMDXComponent=!0}}]);