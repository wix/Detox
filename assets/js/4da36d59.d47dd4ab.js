"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[2831],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var i=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},g="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef(function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),u=r,m=g["".concat(l,".").concat(u)]||g[u]||h[u]||a;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))});function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},27838:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/hierarchy-viewer-0b1843b00b7eb3715f5ffa5ca4da0640.jpg"},30005:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/debug-view-hierarchy-c086dcbfdc42ee69b1e1043bbe89271d.jpg"},53599:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/attach-to-process-e47ced58650b9d7733142a3302fa2a35.jpg"},83775:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=n(58168),r=(n(96540),n(15680));const a={},o="Dealing with Element Matching Issues",s={unversionedId:"troubleshooting/element-matching",id:"version-20.x/troubleshooting/element-matching",title:"Dealing with Element Matching Issues",description:"The preferred element-matching technique in Detox tests is by using test ID's.",source:"@site/versioned_docs/version-20.x/troubleshooting/element-matching.md",sourceDirName:"troubleshooting",slug:"/troubleshooting/element-matching",permalink:"/Detox/docs/troubleshooting/element-matching",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/versioned_docs/version-20.x/troubleshooting/element-matching.md",tags:[],version:"20.x",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dealing With Flakiness in Tests",permalink:"/Detox/docs/troubleshooting/flakiness"},next:{title:"Migration Guide",permalink:"/Detox/docs/guide/migration"}},l={},p=[{value:"Debug View Hierarchy",id:"debug-view-hierarchy",level:2}],c={toc:p},g="wrapper";function h({components:e,...t}){return(0,r.yg)(g,(0,i.A)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"dealing-with-element-matching-issues"},"Dealing with Element Matching Issues"),(0,r.yg)("p",null,"The preferred element-matching technique in Detox tests is by using ",(0,r.yg)("strong",{parentName:"p"},"test ID's"),"."),(0,r.yg)("p",null,"In React Native, the ",(0,r.yg)("inlineCode",{parentName:"p"},"testID")," prop is only supported on ",(0,r.yg)("strong",{parentName:"p"},"built-in native components"),". If you\u2019ve created a ",(0,r.yg)("strong",{parentName:"p"},"custom composite component"),", you\u2019ll need to manually pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"testID")," down to a native child component. The most common approach is to propagate it to one of the rendered children that are ",(0,r.yg)("strong",{parentName:"p"},"native")," components (such as ",(0,r.yg)("inlineCode",{parentName:"p"},"View"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Text"),", or ",(0,r.yg)("inlineCode",{parentName:"p"},"TouchableOpacity"),"):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"export class MyCompositeComponent extends Component {\n  render() {\n    return (\n      <TouchableOpacity testID={this.props.testID}>\n        <View>\n          <Text>Something something</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n")),(0,r.yg)("p",null,"Now, when adding a ",(0,r.yg)("inlineCode",{parentName:"p"},"testID")," to your composite component, it will be correctly applied:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"render() {\n  return <MyCompositeComponent testID='MyUniqueId123' />;\n}\n")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"For more info about this technique and test ID's in general, read our ",(0,r.yg)("a",{parentName:"p",href:"/Detox/docs/guide/test-id"},"guide about test ID's"),".")),(0,r.yg)("h2",{id:"debug-view-hierarchy"},"Debug View Hierarchy"),(0,r.yg)("p",null,"When element matching fails, inspecting the ",(0,r.yg)("strong",{parentName:"p"},"native view hierarchy")," can help diagnose the issue. This allows you to see how elements are structured in the app and determine whether a test ID is missing or the matcher needs to be improved."),(0,r.yg)("p",null,"On iOS, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"xcode")," to visualize the native view hierarchy:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Start a debuggable app (not a release build) in your simulator"),(0,r.yg)("li",{parentName:"ol"},"Open ",(0,r.yg)("inlineCode",{parentName:"li"},"xcode")),(0,r.yg)("li",{parentName:"ol"},"Attach ",(0,r.yg)("inlineCode",{parentName:"li"},"xcode")," to your app\u2019s process\n",(0,r.yg)("img",{alt:"attach to process",src:n(53599).A,width:"860",height:"506"})),(0,r.yg)("li",{parentName:"ol"},"Press the ",(0,r.yg)("inlineCode",{parentName:"li"},"Debug View Hierarchy")," button\n",(0,r.yg)("img",{alt:"debug view hierarchy",src:n(30005).A,width:"962",height:"812"})),(0,r.yg)("li",{parentName:"ol"},"This will open the hierarchy viewer, and will show a breakdown of your app\u2019s native view hierarchy. Here you can browse through the views"),(0,r.yg)("li",{parentName:"ol"},"React Native testIDs are manifested as ",(0,r.yg)("em",{parentName:"li"},"accessibility identifiers")," in the native view hierarchy")),(0,r.yg)("p",null,"Let\u2019s see an example. We will find the following view in the native hierarchy:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"<TouchableOpacity onPress={this.onButtonPress.bind(this, 'ID Working')}>\n  <Text testID='UniqueId345' style={{color: 'blue', marginBottom: 20}}>ID</Text>\n</TouchableOpacity>\n")),(0,r.yg)("p",null,"This is the hierarchy viewer, pointing to the native view just mentioned:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"hierarchy viewer",src:n(27838).A,width:"1415",height:"986"})),(0,r.yg)("p",null,"There are other techniques for doing this besides using ",(0,r.yg)("inlineCode",{parentName:"p"},"xcode"),", and also on Android -- coming soon!"))}h.isMDXComponent=!0}}]);