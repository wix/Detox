"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5122],{6597:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(58168),i=(n(96540),n(15680));const a={},o="Dealing with Element Matching Issues",s={unversionedId:"troubleshooting/element-matching",id:"troubleshooting/element-matching",title:"Dealing with Element Matching Issues",description:"The preferred element-matching technique in Detox tests is by using test ID's.",source:"@site/../docs/troubleshooting/element-matching.md",sourceDirName:"troubleshooting",slug:"/troubleshooting/element-matching",permalink:"/Detox/docs/next/troubleshooting/element-matching",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/troubleshooting/element-matching.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dealing With Flakiness in Tests",permalink:"/Detox/docs/next/troubleshooting/flakiness"},next:{title:"Migration Guide",permalink:"/Detox/docs/next/guide/migration"}},l={},c=[{value:"Debug View Hierarchy",id:"debug-view-hierarchy",level:2}],p={toc:c},g="wrapper";function u({components:e,...t}){return(0,i.yg)(g,(0,r.A)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"dealing-with-element-matching-issues"},"Dealing with Element Matching Issues"),(0,i.yg)("p",null,"The preferred element-matching technique in Detox tests is by using ",(0,i.yg)("strong",{parentName:"p"},"test ID's"),"."),(0,i.yg)("p",null,"In React Native, the ",(0,i.yg)("inlineCode",{parentName:"p"},"testID")," prop is only supported on ",(0,i.yg)("strong",{parentName:"p"},"built-in native components"),". If you\u2019ve created a ",(0,i.yg)("strong",{parentName:"p"},"custom composite component"),", you\u2019ll need to manually pass the ",(0,i.yg)("inlineCode",{parentName:"p"},"testID")," down to a native child component. The most common approach is to propagate it to one of the rendered children that are ",(0,i.yg)("strong",{parentName:"p"},"native")," components (such as ",(0,i.yg)("inlineCode",{parentName:"p"},"View"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"Text"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"TouchableOpacity"),"):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"export class MyCompositeComponent extends Component {\n  render() {\n    return (\n      <TouchableOpacity testID={this.props.testID}>\n        <View>\n          <Text>Something something</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n")),(0,i.yg)("p",null,"Now, when adding a ",(0,i.yg)("inlineCode",{parentName:"p"},"testID")," to your composite component, it will be correctly applied:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"render() {\n  return <MyCompositeComponent testID='MyUniqueId123' />;\n}\n")),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"For more info about this technique and test ID's in general, read our ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/test-id"},"guide about test ID's"),".")),(0,i.yg)("h2",{id:"debug-view-hierarchy"},"Debug View Hierarchy"),(0,i.yg)("p",null,"When element matching fails, inspecting the ",(0,i.yg)("strong",{parentName:"p"},"native view hierarchy")," can help diagnose the issue. This allows you to see how elements are structured in the app and determine whether a test ID is missing or the matcher needs to be improved."),(0,i.yg)("p",null,"On iOS, you can use ",(0,i.yg)("inlineCode",{parentName:"p"},"xcode")," to visualize the native view hierarchy:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Start a debuggable app (not a release build) in your simulator"),(0,i.yg)("li",{parentName:"ol"},"Open ",(0,i.yg)("inlineCode",{parentName:"li"},"xcode")),(0,i.yg)("li",{parentName:"ol"},"Attach ",(0,i.yg)("inlineCode",{parentName:"li"},"xcode")," to your app\u2019s process\n",(0,i.yg)("img",{alt:"attach to process",src:n(71409).A,width:"860",height:"506"})),(0,i.yg)("li",{parentName:"ol"},"Press the ",(0,i.yg)("inlineCode",{parentName:"li"},"Debug View Hierarchy")," button\n",(0,i.yg)("img",{alt:"debug view hierarchy",src:n(9099).A,width:"962",height:"812"})),(0,i.yg)("li",{parentName:"ol"},"This will open the hierarchy viewer, and will show a breakdown of your app\u2019s native view hierarchy. Here you can browse through the views"),(0,i.yg)("li",{parentName:"ol"},"React Native testIDs are manifested as ",(0,i.yg)("em",{parentName:"li"},"accessibility identifiers")," in the native view hierarchy")),(0,i.yg)("p",null,"Let\u2019s see an example. We will find the following view in the native hierarchy:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-jsx"},"<TouchableOpacity onPress={this.onButtonPress.bind(this, 'ID Working')}>\n  <Text testID='UniqueId345' style={{color: 'blue', marginBottom: 20}}>ID</Text>\n</TouchableOpacity>\n")),(0,i.yg)("p",null,"This is the hierarchy viewer, pointing to the native view just mentioned:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"hierarchy viewer",src:n(44864).A,width:"1415",height:"986"})),(0,i.yg)("p",null,"There are other techniques for doing this besides using ",(0,i.yg)("inlineCode",{parentName:"p"},"xcode"),", and also on Android -- coming soon!"))}u.isMDXComponent=!0},9099:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/debug-view-hierarchy-c086dcbfdc42ee69b1e1043bbe89271d.jpg"},15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(n),h=i,m=g["".concat(l,".").concat(h)]||g[h]||u[h]||a;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},44864:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/hierarchy-viewer-0b1843b00b7eb3715f5ffa5ca4da0640.jpg"},71409:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/attach-to-process-e47ced58650b9d7733142a3302fa2a35.jpg"}}]);