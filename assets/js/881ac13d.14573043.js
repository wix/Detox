"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[8768],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>c});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef(function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=s(n),y=i,c=m["".concat(p,".").concat(y)]||m[y]||g[y]||l;return n?a.createElement(c,o(o({ref:t},d),{},{components:n})):a.createElement(c,o({ref:t},d))});function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=y;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},61540:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var a=n(58168),i=(n(96540),n(15680));const l={},o="Actions",r={unversionedId:"api/actions",id:"api/actions",title:"Actions",description:"Detox uses matchers to find UI elements in your app and actions to simulate user interaction with those elements.",source:"@site/../docs/api/actions.md",sourceDirName:"api",slug:"/api/actions",permalink:"/Detox/docs/next/api/actions",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/api/actions.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Matchers",permalink:"/Detox/docs/next/api/matchers"},next:{title:"Expect",permalink:"/Detox/docs/next/api/expect"}},p={},s=[{value:"Methods",id:"methods",level:2},{value:"<code>tap(point)</code>",id:"tappoint",level:3},{value:"<code>multiTap(times)</code>",id:"multitaptimes",level:3},{value:"<code>longPress(point, duration)</code>",id:"longpresspoint-duration",level:3},{value:"<code>longPressAndDrag(duration, normalizedPositionX, normalizedPositionY, targetElement, normalizedTargetPositionX, normalizedTargetPositionY, speed, holdDuration)</code>",id:"longpressanddragduration-normalizedpositionx-normalizedpositiony-targetelement-normalizedtargetpositionx-normalizedtargetpositiony-speed-holdduration",level:3},{value:"<code>swipe(direction[, speed, normalizedOffset, normalizedStartingPointX, normalizedStartingPointY])</code>",id:"swipedirection-speed-normalizedoffset-normalizedstartingpointx-normalizedstartingpointy",level:3},{value:"<code>pinch(scale, speed, angle)</code>  iOS only",id:"pinchscale-speed-angle--ios-only",level:3},{value:"<code>scrollToIndex(index)</code>  Android only",id:"scrolltoindexindex--android-only",level:3},{value:"<code>scroll(offset, direction[, startPositionX, startPositionY])</code>",id:"scrolloffset-direction-startpositionx-startpositiony",level:3},{value:"<code>whileElement(element)</code>",id:"whileelementelement",level:3},{value:"<code>scrollTo(edge[, startPositionX, startPositionY])</code>",id:"scrolltoedge-startpositionx-startpositiony",level:3},{value:"<code>typeText(text)</code>",id:"typetexttext",level:3},{value:"<code>replaceText(text)</code>",id:"replacetexttext",level:3},{value:"<code>clearText()</code>",id:"cleartext",level:3},{value:"<code>tapReturnKey()</code>",id:"tapreturnkey",level:3},{value:"<code>tapBackspaceKey()</code>",id:"tapbackspacekey",level:3},{value:"<code>setColumnToValue(column, value)</code>  iOS only",id:"setcolumntovaluecolumn-value--ios-only",level:3},{value:"<code>setDatePickerDate(dateString, dateFormat)</code>",id:"setdatepickerdatedatestring-dateformat",level:3},{value:"<code>adjustSliderToPosition(normalizedPosition)</code>",id:"adjustslidertopositionnormalizedposition",level:3},{value:"<code>getAttributes()</code>",id:"getattributes",level:3},{value:"iOS-Only",id:"ios-only",level:4},{value:"Android-Only",id:"android-only",level:4},{value:"<code>takeScreenshot(name)</code>",id:"takescreenshotname",level:3},{value:"<code>performAccessibilityAction(actionName)</code>",id:"performaccessibilityactionactionname",level:3},{value:"Deprecated Methods",id:"deprecated-methods",level:2},{value:"<code>tapAtPoint(point)</code>",id:"tapatpointpoint",level:3},{value:"<code>pinchWithAngle(direction, speed, angle)</code>  iOS only",id:"pinchwithangledirection-speed-angle--ios-only",level:3}],d={toc:s},m="wrapper";function g({components:e,...t}){return(0,i.yg)(m,(0,a.A)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"actions"},"Actions"),(0,i.yg)("p",null,"Detox uses ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/api/matchers"},"matchers")," to find UI elements in your app and actions to simulate user interaction with those elements."),(0,i.yg)("p",null,"Use ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/api/expect"},"expectations")," to verify element states."),(0,i.yg)("h2",{id:"methods"},"Methods"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#tappoint"},(0,i.yg)("inlineCode",{parentName:"a"},".tap()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#multitaptimes"},(0,i.yg)("inlineCode",{parentName:"a"},".multiTap()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#longpresspoint-duration"},(0,i.yg)("inlineCode",{parentName:"a"},".longPress()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#longpressanddragduration-normalizedpositionx-normalizedpositiony-targetelement-normalizedtargetpositionx-normalizedtargetpositiony-speed-holdduration"},(0,i.yg)("inlineCode",{parentName:"a"},".longPressAndDrag()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#swipedirection-speed-normalizedoffset-normalizedstartingpointx-normalizedstartingpointy"},(0,i.yg)("inlineCode",{parentName:"a"},".swipe()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#pinchscale-speed-angle--ios-only"},(0,i.yg)("inlineCode",{parentName:"a"},".pinch()"))," ",(0,i.yg)("strong",{parentName:"li"},"iOS only")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#scrolltoindexindex--android-only"},(0,i.yg)("inlineCode",{parentName:"a"},".scrollToIndex()"))," ",(0,i.yg)("strong",{parentName:"li"},"Android only")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#scrolloffset-direction-startpositionx-startpositiony"},(0,i.yg)("inlineCode",{parentName:"a"},".scroll()")),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#whileelementelement"},(0,i.yg)("inlineCode",{parentName:"a"},"whileElement()"))))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#scrolltoedge"},(0,i.yg)("inlineCode",{parentName:"a"},".scrollTo()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#typetexttext"},(0,i.yg)("inlineCode",{parentName:"a"},".typeText()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#replacetexttext"},(0,i.yg)("inlineCode",{parentName:"a"},".replaceText()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#cleartext"},(0,i.yg)("inlineCode",{parentName:"a"},".clearText()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#tapreturnkey"},(0,i.yg)("inlineCode",{parentName:"a"},".tapReturnKey()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#tapbackspacekey"},(0,i.yg)("inlineCode",{parentName:"a"},".tapBackspaceKey()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#setcolumntovaluecolumn-value--ios-only"},(0,i.yg)("inlineCode",{parentName:"a"},".setColumnToValue()"))," ",(0,i.yg)("strong",{parentName:"li"},"iOS only")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#setdatepickerdatedatestring-dateformat"},(0,i.yg)("inlineCode",{parentName:"a"},".setDatePickerDate()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#adjustslidertopositionnormalizedposition"},(0,i.yg)("inlineCode",{parentName:"a"},".adjustSliderToPosition()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#getattributes"},(0,i.yg)("inlineCode",{parentName:"a"},".getAttributes()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#takescreenshotname"},(0,i.yg)("inlineCode",{parentName:"a"},".takeScreenshot(name)"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#performaccessibilityactionactionname"},(0,i.yg)("inlineCode",{parentName:"a"},".performAccessibilityAction()")))),(0,i.yg)("h3",{id:"tappoint"},(0,i.yg)("inlineCode",{parentName:"h3"},"tap(point)")),(0,i.yg)("p",null,"Simulates a tap on the element at the specified point, or at element\u2019s activation point if no point is specified."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"point"),"\u2014a point in the element\u2019s coordinate space (optional, valid input: object with x and y numerical values, default is ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),")"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Note:")," Special care should be applied when specifying a point with this method. Elements may have different dimensions when displayed on different device screen sizes, different text sizes, etc."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('tappable')).tap();\nawait element(by.id('tappable')).tap({x:5, y:10});\n")),(0,i.yg)("h3",{id:"multitaptimes"},(0,i.yg)("inlineCode",{parentName:"h3"},"multiTap(times)")),(0,i.yg)("p",null,"Simulates multiple taps on the element at its activation point. All taps are applied as a part of the same gesture and there is no synchronization attempt between taps."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"times"),"\u2014the number of taps to simulate (number, 1 and above)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('tappable')).multiTap(3);\n")),(0,i.yg)("h3",{id:"longpresspoint-duration"},(0,i.yg)("inlineCode",{parentName:"h3"},"longPress(point, duration)")),(0,i.yg)("p",null,"Simulates a long press on the element at its activation point or at the specified point."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"point")," \u2014 a point in the element\u2019s coordinate space (optional, object with ",(0,i.yg)("inlineCode",{parentName:"p"},"x")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"y")," numerical values, default is ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),").\n",(0,i.yg)("inlineCode",{parentName:"p"},"duration")," \u2014 press during time, in milliseconds. Optional (defaults to the standard long-press duration for the platform)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('tappable')).longPress();\nawait element(by.id('tappable')).longPress({x:5, y:10});\nawait element(by.id('tappable')).longPress(1500);\nawait element(by.id('tappable')).longPress({x:5, y:10}, 1500);\n")),(0,i.yg)("admonition",{title:"Important",type:"note"},(0,i.yg)("p",{parentName:"admonition"},"Custom durations should be used cautiously, as they can affect test consistency and user experience expectations.\nThey are typically necessary when testing components that behave differently from the platform's defaults or when simulating unique user interactions.")),(0,i.yg)("h3",{id:"longpressanddragduration-normalizedpositionx-normalizedpositiony-targetelement-normalizedtargetpositionx-normalizedtargetpositiony-speed-holdduration"},(0,i.yg)("inlineCode",{parentName:"h3"},"longPressAndDrag(duration, normalizedPositionX, normalizedPositionY, targetElement, normalizedTargetPositionX, normalizedTargetPositionY, speed, holdDuration)")),(0,i.yg)("p",null,"Simulates a long press on the element and then drag it to a position of another element."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"duration")," \u2014the duration to press for, in ms (required) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedPositionX")," \u2014 X coordinate of the starting point, relative to the element width (required, a number between 0.0 and 1.0, ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedPositionY")," \u2014 Y coordinate of the starting point, relative to the element height (required, a number between 0.0 and 1.0, ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"targetElement"),"\u2014 the target element to drag to (required) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedTargetPositionX")," \u2014 X coordinate of the ending point, relative to the target element width (optional, a number between 0.0 and 1.0, ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedTargetPositionY")," \u2014 Y coordinate of the ending point, relative to the target element height (optional, a number between 0.0 and 1.0, ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"speed")," \u2014 the speed of the drag (optional, valid input: ",(0,i.yg)("inlineCode",{parentName:"li"},'"fast"'),"/",(0,i.yg)("inlineCode",{parentName:"li"},'"slow"')," , default is ",(0,i.yg)("inlineCode",{parentName:"li"},'"fast"'),") ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"holdDuration")," \u2014 the duration before releasing at the end, in ms (optional, default is 1000)")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('elementToDrag')).longPressAndDrag(2000, NaN, NaN, element(by.id('targetElement')), NaN, NaN);\nawait element(by.id('cellId_1')).longPressAndDrag(2000, 0.9, NaN, element(by.id('cellId_6')), 0.9, NaN, 'slow', 0);\n")),(0,i.yg)("h3",{id:"swipedirection-speed-normalizedoffset-normalizedstartingpointx-normalizedstartingpointy"},(0,i.yg)("inlineCode",{parentName:"h3"},"swipe(direction[, speed, normalizedOffset, normalizedStartingPointX, normalizedStartingPointY])")),(0,i.yg)("p",null,"Simulates a swipe on the element with the provided options."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"direction")," \u2014 the direction of the swipe (required, valid input: ",(0,i.yg)("inlineCode",{parentName:"li"},'"left"'),"/",(0,i.yg)("inlineCode",{parentName:"li"},'"right"'),"/",(0,i.yg)("inlineCode",{parentName:"li"},'"up"'),"/",(0,i.yg)("inlineCode",{parentName:"li"},'"down"'),") ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"speed")," \u2014 the speed of the swipe (optional, valid input: ",(0,i.yg)("inlineCode",{parentName:"li"},'"fast"'),"/",(0,i.yg)("inlineCode",{parentName:"li"},'"slow"')," , default is ",(0,i.yg)("inlineCode",{parentName:"li"},'"fast"'),") ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedOffset")," \u2014 swipe amount relative to the screen width/height (optional, a number between 0.0 and 1.0, default is ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedStartingPointX")," \u2014 X coordinate of the swipe starting point, relative to the element width (optional, a number between 0.0 and 1.0, default is ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically) ",(0,i.yg)("br",null)),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedStartingPointY")," \u2014 Y coordinate of the swipe starting point, relative to the element height (optional, a number between 0.0 and 1.0, default is ",(0,i.yg)("inlineCode",{parentName:"li"},"NaN")," \u2014 choose an optimal value automatically)")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('scrollView')).swipe('down');\nawait element(by.id('scrollView')).swipe('down', 'slow'); // set swipe speed\nawait element(by.id('scrollView')).swipe('down', 'fast', 0.75); // set swipe amount\nawait element(by.id('scrollView')).swipe('down', 'fast', NaN, 0.8); // set starting point X\nawait element(by.id('scrollView')).swipe('down', 'fast', NaN, NaN, 0.25); // set starting point Y\n")),(0,i.yg)("h3",{id:"pinchscale-speed-angle--ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"pinch(scale, speed, angle)"),"  iOS only"),(0,i.yg)("p",null,"Simulates a pinch on the element with the provided options."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"scale"),"\u2014the scale of the pinch gesture; use a scale between 0 and 1 to zoom out, and a scale greater than 1 to zoom in; the system makes a best effort to accommodate the requested scale, taking into account the element\u2019s dimensions (valid input: (0.0, inf]) ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"speed"),"\u2014the speed of the pinch (optional, valid input: ",(0,i.yg)("inlineCode",{parentName:"p"},'"fast"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"slow"')," , default is ",(0,i.yg)("inlineCode",{parentName:"p"},'"slow"'),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"angle"),"\u2014the angle of the pinch, in radians (optional, default is 0.0)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('PinchableScrollView')).pinch(1.1); //Zooms in a little bit\nawait element(by.id('PinchableScrollView')).pinch(2.0); //Zooms in a lot\nawait element(by.id('PinchableScrollView')).pinch(0.001); //Zooms out a lot\n")),(0,i.yg)("h3",{id:"scrolltoindexindex--android-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"scrollToIndex(index)"),"  Android only"),(0,i.yg)("p",null,"Scrolls until it reaches the element with the provided index. This works for ",(0,i.yg)("inlineCode",{parentName:"p"},"ReactScrollView")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ReactHorizontalScrollView"),"."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"index"),"\u2014the index of the target element ",(0,i.yg)("br",null)),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('scrollView')).scrollToIndex(0);\n")),(0,i.yg)("h3",{id:"scrolloffset-direction-startpositionx-startpositiony"},(0,i.yg)("inlineCode",{parentName:"h3"},"scroll(offset, direction[, startPositionX, startPositionY])")),(0,i.yg)("p",null,"Simulates a scroll on the element with the provided options."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"offset"),"\u2014the offset to scroll, in points ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"direction"),"\u2014the scroll\u2019s direction (valid input: ",(0,i.yg)("inlineCode",{parentName:"p"},'"left"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"right"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"up"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"down"'),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"startPositionX"),"\u2014the normalized x percentage of the element to use as scroll start point (optional, valid input: ","[","0.0, 1.0], ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),"\u2014choose an optimal value automatically, default is ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"startPositionY"),"\u2014the normalized y percentage of the element to use as scroll start point (optional, valid input: ","[","0.0, 1.0], ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),"\u2014choose an optimal value automatically, default is ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),")"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('scrollView')).scroll(100, 'up');\nawait element(by.id('scrollView')).scroll(100, 'down', NaN, 0.85);\n")),(0,i.yg)("h3",{id:"whileelementelement"},(0,i.yg)("inlineCode",{parentName:"h3"},"whileElement(element)")),(0,i.yg)("p",null,"Continuously scrolls the scroll element until the specified expectation is resolved. If the edge of the scroll element is reached while the expectation is not resolved, the operation is failed."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await waitFor(element(by.text('Text5'))).toBeVisible().whileElement(by.id('ScrollView630')).scroll(50, 'down');\n")),(0,i.yg)("h3",{id:"scrolltoedge-startpositionx-startpositiony"},(0,i.yg)("inlineCode",{parentName:"h3"},"scrollTo(edge[, startPositionX, startPositionY])")),(0,i.yg)("p",null,"Simulates a scroll to the specified edge."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"edge"),"\u2014the edge to scroll to (valid input: ",(0,i.yg)("inlineCode",{parentName:"p"},'"left"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"right"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"top"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"bottom"'),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"startPositionX"),"\u2014the normalized x percentage of the element to use as scroll start point (optional, valid input: ","[","0.0, 1.0], ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),"\u2014choose an optimal value automatically, default is ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"startPositionY"),"\u2014the normalized y percentage of the element to use as scroll start point (optional, valid input: ","[","0.0, 1.0], ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),"\u2014choose an optimal value automatically, default is ",(0,i.yg)("inlineCode",{parentName:"p"},"NaN"),")"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('scrollView')).scrollTo('bottom');\nawait element(by.id('scrollView')).scrollTo('top', NaN, 0.2);\n")),(0,i.yg)("h3",{id:"typetexttext"},(0,i.yg)("inlineCode",{parentName:"h3"},"typeText(text)")),(0,i.yg)("p",null,"Simulates typing of the specified text into the element, using the system\u2019s builtin keyboard and typing behavior."),(0,i.yg)("p",null,"On iOS, any element can be typed into, as long as it can become first responder and conforms to the ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uitextinput"},(0,i.yg)("inlineCode",{parentName:"a"},"UITextInput"))," protocol. Before typing the text, Detox attempts making the element the first responder, if it isn\u2019t already. If the element\u2019s window is not key window, Detox attempts making it the key window."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"text"),"\u2014the text to type (valid input: string)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('textField')).typeText('passcode');\n")),(0,i.yg)("h3",{id:"replacetexttext"},(0,i.yg)("inlineCode",{parentName:"h3"},"replaceText(text)")),(0,i.yg)("p",null,"Replaces the element\u2019s text with the specified text, without using the system\u2019s builtin keyboard or typing behavior. ",(0,i.yg)("strong",{parentName:"p"},"Note"),", that using this method is faster than using ",(0,i.yg)("a",{parentName:"p",href:"#typetexttext"},(0,i.yg)("inlineCode",{parentName:"a"},".typeText()")),", but may not trigger all text input callbacks, causing an undefined state in your app."),(0,i.yg)("p",null,"On iOS, any element\u2019s text can be replaced, as long as it can become first responder and conforms to the ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uitextinput"},(0,i.yg)("inlineCode",{parentName:"a"},"UITextInput"))," protocol. Before replacing the text, Detox attempts making the element the first responder, if it isn\u2019t already. If the element\u2019s window is not key window, Detox attempts making it the key window."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"text"),"\u2014the text to replace with (valid input: string)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('textField')).replaceText('passcode again');\n")),(0,i.yg)("h3",{id:"cleartext"},(0,i.yg)("inlineCode",{parentName:"h3"},"clearText()")),(0,i.yg)("p",null,"Simulates clearing the text of the element, using the system\u2019s builtin keyboard and typing behavior."),(0,i.yg)("p",null,"On iOS, any element\u2019s text can be cleared, as long as it can become first responder and conforms to the ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uitextinput"},(0,i.yg)("inlineCode",{parentName:"a"},"UITextInput"))," protocol. Before clearing the text, Detox attempts making the element the first responder, if it isn\u2019t already. If the element\u2019s window is not key window, Detox attempts making it the key window."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('textField')).clearText();\n")),(0,i.yg)("h3",{id:"tapreturnkey"},(0,i.yg)("inlineCode",{parentName:"h3"},"tapReturnKey()")),(0,i.yg)("p",null,"Simulates tapping on the return key into the element, using the system\u2019s builtin keyboard and typing behavior."),(0,i.yg)("p",null,"On iOS, any element can be sent return key input, as long as it can become first responder and conforms to the ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uitextinput"},(0,i.yg)("inlineCode",{parentName:"a"},"UITextInput"))," protocol. Before tapping on the return key, Detox attempts making the element the first responder, if it isn\u2019t already. If the element\u2019s window is not key window, Detox attempts making it the key window."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('textField')).tapReturnKey();\n")),(0,i.yg)("h3",{id:"tapbackspacekey"},(0,i.yg)("inlineCode",{parentName:"h3"},"tapBackspaceKey()")),(0,i.yg)("p",null,"Simulates tapping of the backspace key into the element, using the system\u2019s builtin keyboard and typing behavior."),(0,i.yg)("p",null,"On iOS, any element can be sent backspace key input, as long as it can become first responder and conforms to the ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uitextinput"},(0,i.yg)("inlineCode",{parentName:"a"},"UITextInput"))," protocol. Before tapping on the backspace key, Detox attempts making the element the first responder, if it isn\u2019t already. If the element\u2019s window is not key window, Detox attempts making it the key window."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('textField')).tapBackspaceKey();\n")),(0,i.yg)("h3",{id:"setcolumntovaluecolumn-value--ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"setColumnToValue(column, value)"),"  iOS only"),(0,i.yg)("p",null,"Sets the element\u2019s specified column to the specified value, using the system\u2019s picker view APIs."),(0,i.yg)("p",null,"Values accepted by this method are strings only, and the system will do its best to match complex picker view cells to the string."),(0,i.yg)("p",null,"This function does not support date pickers. Use ",(0,i.yg)("a",{parentName:"p",href:"#setdatepickerdatedatestring-dateformat"},(0,i.yg)("inlineCode",{parentName:"a"},".setDatePickerDate()"))," instead."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"column"),"\u2014the element\u2019s column to set (valid input: number, 0 and above) ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"value"),"\u2014the string value to set (valid input: string)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('pickerView')).setColumnToValue(1, \"6\");\nawait element(by.id('pickerView')).setColumnToValue(2, \"Hello World\");\n")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("strong",{parentName:"p"},"Note:")," When working with date pickers, you should always set an explicit locale when launching your app in order to prevent flakiness from different date and time styles. See ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/api/device#9-languageandlocalelaunch-with-a-specific-language-andor-local-ios-only"},"here")," for more information.")),(0,i.yg)("h3",{id:"setdatepickerdatedatestring-dateformat"},(0,i.yg)("inlineCode",{parentName:"h3"},"setDatePickerDate(dateString, dateFormat)")),(0,i.yg)("p",null,"Sets the date-picker\u2019s date to the specified date and time."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"dateString"),"\u2014The date to set. Should match the format provided by ",(0,i.yg)("inlineCode",{parentName:"p"},"dateFormat"),".",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"dateFormat"),"\u2014The format of ",(0,i.yg)("inlineCode",{parentName:"p"},"dateString"),". Should be either ",(0,i.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString"},(0,i.yg)("inlineCode",{parentName:"a"},"'ISO8601'")),", or an explicit date representation format, as supported by ",(0,i.yg)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/dateformatter"},(0,i.yg)("inlineCode",{parentName:"a"},"NSDateFormatter"))," on iOS / ",(0,i.yg)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"},(0,i.yg)("inlineCode",{parentName:"a"},"DateTimeFormatter"))," on Android (e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"'yyyy/MM/dd'"),")."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("em",{parentName:"p"},"The recommended ",(0,i.yg)("inlineCode",{parentName:"em"},"dateFormat")," is ",(0,i.yg)("inlineCode",{parentName:"em"},"ISO8601"),"."))),(0,i.yg)("p",null,"Examples:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"const datePicker = element(by.id('datePicker'));\n\n// ISO8601:\nawait datePicker.setDatePickerDate('2019-02-06T05:10:00-08:00', 'ISO8601');\nawait datePicker.setDatePickerDate(new Date().toISOString(), 'ISO8601'); // toISOString returns an ISO8601 format with no timezone (UTC-0)\n\n// Explicit format:\nawait datePicker.setDatePickerDate('2019/02/06', \"yyyy/MM/dd\");\n")),(0,i.yg)("admonition",{type:"info"},(0,i.yg)("p",{parentName:"admonition"},"As far as element-matching is concerned, on Android, older versions of the popular ",(0,i.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@react-native-community/datetimepicker"},(0,i.yg)("inlineCode",{parentName:"a"},"@react-native-community/datetimepicker"))," package don\u2019t allow for the specification of your own ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/test-id"},(0,i.yg)("inlineCode",{parentName:"a"},"testID"))," prop for the date-picker component. Therefore, you'd have to either upgrade your package  to a newer version containing ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/react-native-datetimepicker/datetimepicker/pull/705"},"PR datetimepicker#705")," inside, or use Detox's ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/api/matchers#bytypeclassname"},(0,i.yg)("inlineCode",{parentName:"a"},"by.type"))," matcher as a workaround. For example:"),(0,i.yg)("pre",{parentName:"admonition"},(0,i.yg)("code",{parentName:"pre",className:"language-js"},"const datePicker = device.getPlatform() === 'android'\n  ? element(by.type('android.widget.DatePicker'))\n  : element(by.id('datePicker'));\n"))),(0,i.yg)("h3",{id:"adjustslidertopositionnormalizedposition"},(0,i.yg)("inlineCode",{parentName:"h3"},"adjustSliderToPosition(normalizedPosition)")),(0,i.yg)("p",null,"Manipulates the UI to change the displayed value of the slider element to a new value, based on a normalized position."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"normalizedPosition"),"\u2014The normalized position to adjust the slider element. (valid input: ","[","0, 1], 0 corresponds to the minimum value of the slider, and 1 corresponds to the maximum value)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('slider')).adjustSliderToPosition(0.75);\n")),(0,i.yg)("h3",{id:"getattributes"},(0,i.yg)("inlineCode",{parentName:"h3"},"getAttributes()")),(0,i.yg)("p",null,"Returns an object, representing various attributes of the element."),(0,i.yg)("p",null,"Retrieved attributes are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"text"),": The text value of any textual element."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"label"),": The label of the element. Matches ",(0,i.yg)("inlineCode",{parentName:"li"},"accessibilityLabel")," for iOS, and ",(0,i.yg)("inlineCode",{parentName:"li"},"contentDescription")," for android. Refer to the ",(0,i.yg)("a",{parentName:"li",href:"/Detox/docs/next/api/expect#tohavelabellabel"},(0,i.yg)("inlineCode",{parentName:"a"},".toHaveLabel()")," API")," in order to learn about caveats associated with this attribute in React Native apps."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"placeholder"),": The placeholder text value of the element. Matches ",(0,i.yg)("inlineCode",{parentName:"li"},"hint")," on android."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"enabled"),": Whether the element is enabled for user interaction."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"identifier"),": The identifier of the element. Matches ",(0,i.yg)("inlineCode",{parentName:"li"},"accessibilityIdentifier")," on iOS, and the main view tag, on Android - both commonly ",(0,i.yg)("strong",{parentName:"li"},"holding the component\u2019s test ID in React Native apps"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"visible"),": Whether the element is visible. On iOS, visibility is calculated for the ",(0,i.yg)("a",{parentName:"li",href:"https://developer.apple.com/documentation/objectivec/nsobject/1615179-accessibilityactivationpoint"},"activation point"),". On Android, the attribute directly holds the value returned by ",(0,i.yg)("a",{parentName:"li",href:"https://developer.android.com/reference/kotlin/android/view/View#getglobalvisiblerect"},"View.getLocalVisibleRect()"),")."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"value"),": The value of the element, where applicable. For example: the position of a slider, or whether a checkbox has been marked. Matches ",(0,i.yg)("inlineCode",{parentName:"li"},"accessibilityValue"),", on iOS."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"frame"),": The frame of the element, in screen coordinate space.")),(0,i.yg)("h4",{id:"ios-only"},"iOS-Only"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"activationPoint"),": The ",(0,i.yg)("a",{parentName:"li",href:"https://developer.apple.com/documentation/objectivec/nsobject/1615179-accessibilityactivationpoint"},"activation point")," of the element, in element coordinate space."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedActivationPoint"),": The activation point of the element, in normalized percentage (","[","0.0, 1.0])."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"hittable"),": Whether the element is hittable at the activation point."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"elementFrame"),": The frame of the element, in container coordinate space."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"elementBounds"),": The bounds of the element, in element coordinate space."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"safeAreaInsets"),": The safe area insets of the element, in element coordinate space."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"elementSafeBounds"),": The safe area bounds of the element, in element coordinate space."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"date"),": The date of the element (in case the element is a date picker)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"normalizedSliderPosition"),": The normalized slider position (in case the element is a slider)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"contentOffset"),": The content offset (in case the element is a scroll view)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"contentInset"),": The content inset (in case the element is a scroll view)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"adjustedContentInset"),": The adjusted content inset (in case the element is a scroll view).")),(0,i.yg)("h4",{id:"android-only"},"Android-Only"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"visibility"),": The OS visibility type associated with the element: ",(0,i.yg)("inlineCode",{parentName:"li"},"visible"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"invisible")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"gone"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"width"),": Width of the element, in pixels (deprecated)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"height"),": Height of the element, in pixels (deprecated)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"elevation"),": Elevation of the element."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"alpha"),": Alpha value for the element."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"focused"),": Whether the element is the one currently in focus."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"textSize"),": The text size for the text element."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"length"),": The length of the text element (character count).")),(0,i.yg)("p",null,"If the value for a given attribute is null or cannot be otherwise computed, the key will not be present, but empty strings may be found in the object."),(0,i.yg)("p",null,"If the query matches multiple elements, the attributes of all matched elements is returned as an array of objects under the ",(0,i.yg)("inlineCode",{parentName:"p"},"elements")," key."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"// import jestExpect from 'expect';\nconst jestExpect = require('expect').default;\n\n// ...\nconst attributes = await element(by.text('Tap Me')).getAttributes();\njestExpect(attributes.text).toBe('Tap Me');\n\nconst multipleMatchedElements = await element(by.text('Multiple')).getAttributes();\njestExpect(multipleMatchedElements.elements.length).toBe(5);\njestExpect(multipleMatchedElements.elements[0].identifier).toBe('FirstElement');\n")),(0,i.yg)("h3",{id:"takescreenshotname"},(0,i.yg)("inlineCode",{parentName:"h3"},"takeScreenshot(name)")),(0,i.yg)("p",null,"Takes a screenshot of the matched element. For full details on taking screenshots with Detox, refer to the ",(0,i.yg)("a",{parentName:"p",href:"/Detox/docs/next/guide/taking-screenshots"},"screenshots guide"),"."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"name"),"\u2014the name of the screenshot"),(0,i.yg)("h3",{id:"performaccessibilityactionactionname"},(0,i.yg)("inlineCode",{parentName:"h3"},"performAccessibilityAction(actionName)")),(0,i.yg)("p",null,"Triggers an ",(0,i.yg)("a",{parentName:"p",href:"https://reactnative.dev/docs/accessibility#accessibility-actions"},"accessibility action"),"."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"actionName"),"\u2014the name of the accessibility action ",(0,i.yg)("br",null)),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('scrollView')).performAccessibilityAction(\"activate\");\n")),(0,i.yg)("h2",{id:"deprecated-methods"},"Deprecated Methods"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#tapatpointpoint"},(0,i.yg)("inlineCode",{parentName:"a"},".tapAtPoint()"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#pinchwithangledirection-speed-angle--ios-only"},(0,i.yg)("inlineCode",{parentName:"a"},".pinchWithAngle()"))," ",(0,i.yg)("strong",{parentName:"li"},"iOS only"))),(0,i.yg)("h3",{id:"tapatpointpoint"},(0,i.yg)("inlineCode",{parentName:"h3"},"tapAtPoint(point)")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Deprecated:")," Use ",(0,i.yg)("a",{parentName:"p",href:"#tappoint"},(0,i.yg)("inlineCode",{parentName:"a"},".tap()"))," instead."),(0,i.yg)("p",null,"Simulates a tap at on the element at the specified point."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"point"),"\u2014a point in the element\u2019s coordinate space"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('tappable')).tapAtPoint({x:5, y:10});\n")),(0,i.yg)("h3",{id:"pinchwithangledirection-speed-angle--ios-only"},(0,i.yg)("inlineCode",{parentName:"h3"},"pinchWithAngle(direction, speed, angle)"),"  iOS only"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Deprecated:")," Use ",(0,i.yg)("a",{parentName:"p",href:"#pinchscale-speed-angle--ios-only"},(0,i.yg)("inlineCode",{parentName:"a"},".pinch()"))," instead."),(0,i.yg)("p",null,"Simulates a pinch on the element with the provided options."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"direction"),"\u2014the direction of the pinch gesture (valid input: ",(0,i.yg)("inlineCode",{parentName:"p"},'"inward"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"outward"'),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"speed"),"\u2014the speed of the pinch (optional, valid input: ",(0,i.yg)("inlineCode",{parentName:"p"},'"fast"'),"/",(0,i.yg)("inlineCode",{parentName:"p"},'"slow"')," , default is ",(0,i.yg)("inlineCode",{parentName:"p"},'"slow"'),") ",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"angle"),"\u2014the angle of the pinch, in radians (optional, default is 0.0)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('PinchableScrollView')).pinchWithAngle('outward', 'slow', 0);\n")))}g.isMDXComponent=!0}}]);