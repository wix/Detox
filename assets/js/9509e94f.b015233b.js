"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[708],{9622:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/app-loader-ded8e66eac9d89b61d7f24c51f621c54.jpeg"},15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var i=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),g=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=g(e.components);return i.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=g(t),h=a,d=c["".concat(l,".").concat(h)]||c[h]||u[h]||o;return t?i.createElement(d,s(s({ref:n},p),{},{components:t})):i.createElement(d,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=h;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[c]="string"==typeof e?e:a,s[1]=r;for(var g=2;g<o;g++)s[g]=t[g];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},53459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>g});var i=t(58168),a=(t(96540),t(15680));const o={},s="Dealing With Synchronization Issues in Tests",r={unversionedId:"troubleshooting/synchronization",id:"version-20.x/troubleshooting/synchronization",title:"Dealing With Synchronization Issues in Tests",description:"Traditionally, one of the most difficult aspects of E2E testing is synchronizing the test scenario with the app.",source:"@site/versioned_docs/version-20.x/troubleshooting/synchronization.md",sourceDirName:"troubleshooting",slug:"/troubleshooting/synchronization",permalink:"/Detox/docs/troubleshooting/synchronization",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/versioned_docs/version-20.x/troubleshooting/synchronization.md",tags:[],version:"20.x",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dealing With Problems With Running Tests",permalink:"/Detox/docs/troubleshooting/running-tests"},next:{title:"Dealing With Flakiness in Tests",permalink:"/Detox/docs/troubleshooting/flakiness"}},l={},g=[{value:"Mitigating Synchronization Issues",id:"mitigating-synchronization-issues",level:2},{value:"Step 1: Understanding what&#39;s blocking your app",id:"step-1-understanding-whats-blocking-your-app",level:3},{value:"(Optional) Lower-level debugging (iOS only)",id:"optional-lower-level-debugging-ios-only",level:4},{value:"Step 2: Applying the Most Suitable Solution",id:"step-2-applying-the-most-suitable-solution",level:3},{value:"Dealing with endless animation bugs (e.g. loaders)",id:"dealing-with-endless-animation-bugs-eg-loaders",level:4},{value:"i. A server is being non-responsive",id:"i-a-server-is-being-non-responsive",level:5},{value:"ii. A returned server error is not conveyed by the UI",id:"ii-a-returned-server-error-is-not-conveyed-by-the-ui",level:5},{value:"iii. An app error is ignored",id:"iii-an-app-error-is-ignored",level:5},{value:"Dealing with looping animations",id:"dealing-with-looping-animations",level:4},{value:"Dealing with <strong>hidden</strong> animations",id:"dealing-with-hidden-animations",level:4},{value:"Dealing with network synchronization issues",id:"dealing-with-network-synchronization-issues",level:4},{value:"Dealing with endless timers",id:"dealing-with-endless-timers",level:4},{value:"Last resort: Switching to manual synchronization",id:"last-resort-switching-to-manual-synchronization",level:4},{value:"Hybrid manual/automatic synchronization",id:"hybrid-manualautomatic-synchronization",level:5}],p={toc:g},c="wrapper";function u(e){let{components:n,...o}=e;return(0,a.yg)(c,(0,i.A)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"dealing-with-synchronization-issues-in-tests"},"Dealing With Synchronization Issues in Tests"),(0,a.yg)("p",null,"Traditionally, one of the most difficult aspects of E2E testing is synchronizing the test scenario with the app."),(0,a.yg)("p",null,"Complex operations inside the app (like accessing servers or performing animations) often take a variable amount of time to complete; In each step, we can\u2019t move on to the next one until they\u2019ve completed (i.e. when the app goes idle), which in turn surfaces a challenge in continuously trying to understand when the right time to do so is."),(0,a.yg)("p",null,"Fortunately, Detox - which comes with a gray-box approach, cleverly performs the synchronization automatically, as explained ",(0,a.yg)("a",{parentName:"p",href:"/Detox/docs/articles/how-detox-works#how-detox-automatically-synchronizes-with-your-app"},"here"),"."),(0,a.yg)("h2",{id:"mitigating-synchronization-issues"},"Mitigating Synchronization Issues"),(0,a.yg)("p",null,"While Detox's auto-synchronization mechanism is powerful and efficient, it does come with at least one caveat: ",(0,a.yg)("strong",{parentName:"p"},"It imposes strictness over the app's behavior.")," By default, Detox will fail your tests (i.e. due to a wait-for-idle ",(0,a.yg)("strong",{parentName:"p"},"time-out"),"), if, for example, following an app launch or a navigation to a new screen, timers or animations continue to run endlessly. While this could be considered an advantage (e.g. finding an animation or timer management leakage!), these type of issues may not:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Be specifically related to the main coverage goal of your test."),(0,a.yg)("li",{parentName:"ol"},"Be directly visible to or considered a significant bug by the end user.")),(0,a.yg)("p",null,"Therefore, it may be something some would want to be able to limit or completely opt-out of. With this in mind, let's review the possible ways of mitigation, aimed at either finding and fixing a bug, or allowing for it to be overlooked."),(0,a.yg)("h3",{id:"step-1-understanding-whats-blocking-your-app"},"Step 1: Understanding what's blocking your app"),(0,a.yg)("p",null,"Detox's synchronization debugging mechanism generates output to Detox's log which provides useful synchronization debugging information. We recommend that you'd start by pinpointing what the busy resources are - those that are keeping your app from going idle, based on those logs. Turn the debugging mechanism toggle on if you need to (although, it is on by default), rerun your test(s) and follow Detox's logs."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Read about Detox's ",(0,a.yg)("em",{parentName:"p"},"synchronization debugging mechanism")," in order to understand how to debug your app for unnecessarily busy resources. It can be specified either via the ",(0,a.yg)("a",{parentName:"p",href:"/Detox/docs/config/session#sessiondebugsynchronization-number"},"Detox configuration file")," or more directly, as a ",(0,a.yg)("a",{parentName:"p",href:"/Detox/docs/cli/test#options"},"CLI argument"),":"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-js"},"detox test --debug-synchronization 5000\n"))),(0,a.yg)("h4",{id:"optional-lower-level-debugging-ios-only"},"(Optional) Lower-level debugging (iOS only)"),(0,a.yg)("p",null,"If the synchronization debugging mechanism does not provide all of the necessary information, on iOS you can add the following launch argument to your app (using ",(0,a.yg)("inlineCode",{parentName:"p"},"launchArgs")," in your ",(0,a.yg)("inlineCode",{parentName:"p"},"launchApp()")," call) to enable a very verbose logging of the idling resource system to the system log:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plain",metastring:"text",text:!0},"-DTXEnableVerboseSyncSystem YES -DTXEnableVerboseSyncResources YES\n")),(0,a.yg)("p",null,"You can then obtain this log by running the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"xcrun simctl spawn booted log stream --level debug --style compact --predicate \"category=='SyncManager'\"\n")),(0,a.yg)("p",null,"For example, change your ",(0,a.yg)("inlineCode",{parentName:"p"},"device.launchApp()")," call like:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"await device.launchApp({\n  newInstance: true,\n  launchArgs: { 'DTXEnableVerboseSyncSystem': 'YES', 'DTXEnableVerboseSyncResources': 'YES' },\n});\n")),(0,a.yg)("h3",{id:"step-2-applying-the-most-suitable-solution"},"Step 2: Applying the Most Suitable Solution"),(0,a.yg)("p",null,"First and foremost, as explained, an app's inability to go idle might be an indication of that some resources are ",(0,a.yg)("em",{parentName:"p"},"unnecessarily")," busy. Therefore, whether it's a network request that's been left unacknowledged, or an endless loader -"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"The best solution is to fix the problem! \ud83d\udc77\u200d\u2642\ufe0f")),(0,a.yg)("h4",{id:"dealing-with-endless-animation-bugs-eg-loaders"},"Dealing with endless animation bugs (e.g. loaders)"),(0,a.yg)("p",null,"Sometimes the resource that's holding the app back from turning idle is a mere animation of a single loader - running endlessly on the screen:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"App loader example",src:t(9622).A,width:"324",height:"720"})),(0,a.yg)("p",null,"The synchronization logs telling you that, would usually look roughly like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plain",metastring:"text",text:!0},"09:04:20.170 detox[90417] i The app is busy with the following tasks:\n\u2022 UI elements are busy:\n  - View animations pending: 2.\n  - Layers pending animations: 7.\n  - Layers needs layout: 147.\n  - View needs layout: 98.\n  - View needs display: 67.\n  - Layers needs display: 82.\n\u2022 1 enqueued native timers:\n  - Timer #1:\n    + Fire date: none.\n    + Time until fire: 0.000.\n    + Repeat interval: 0.\n    + Is recurring: YES.\n")),(0,a.yg)("sup",null,"(these are logs generated by Detox iOS; Detox-Android generates different yet equivalent ones)"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Below are a few actual-bug scenarios where this can take place - all of which are easy to inspect, identify and fix.")),(0,a.yg)("h5",{id:"i-a-server-is-being-non-responsive"},"i. A server is being non-responsive"),(0,a.yg)("p",null,"Your app is waiting indefinitely to load all of the necessary data from the a non-responsive server / a bad network, and therefore cannot switch to rendering the expected UI. When this is the deal, additional synchronization logs also repeatedly show some in-flight network calls:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plain",metastring:"text",text:!0},"09:04:20.170 detox[90417] i The app is busy with the following tasks:\n\u2022 1 network requests with URLs:\n  - URL #1: https://nonresponsive-server.org/something?id=1337\n  - URL #2: https://unreachable-server.org/hello\n")),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"This can be solved by finding out why the server is being non-responsive or unreachable, for example - by tracking network calls into the logs, or inspecting requests on the server-ends.")),(0,a.yg)("h5",{id:"ii-a-returned-server-error-is-not-conveyed-by-the-ui"},"ii. A returned server error is not conveyed by the UI"),(0,a.yg)("p",null,"Sometimes the servers ",(0,a.yg)("em",{parentName:"p"},"do")," respond, ",(0,a.yg)("strong",{parentName:"p"},"but with an error"),". Often times, we fail to adjust our app code to display the necessary UI (e.g. replacing the loader with a friendly message). Rather, the loader just remains running indefinitely. Unlike in the previous case, you will not see synchronization-debug logs surfacing those unacknowledged network calls."),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Scan through the ",(0,a.yg)("strong",{parentName:"em"},"app/device")," logs (not Detox log!) from the bottom up and find traces of errors. The app/device logs can be automatically recorded by Detox as a test-run artifact.")),(0,a.yg)("h5",{id:"iii-an-app-error-is-ignored"},"iii. An app error is ignored"),(0,a.yg)("p",null,"Last but not least, this behavior can be the result of an app bug around handling ",(0,a.yg)("strong",{parentName:"p"},"valid data returned from the server"),", such as an error while parsing the data."),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Look up the error - which usually comes with a stack-trace and is therefore very prominent, in the test summary in the (also Detox) logs. If it's not in the summary itself, you'd have to resort to searching those in the app/device logs. The app/device logs can be automatically recorded by Detox as a test-run artifact.")),(0,a.yg)("h4",{id:"dealing-with-looping-animations"},"Dealing with looping animations"),(0,a.yg)("p",null,"Animations are ultimately a way of making our apps friendlier and nicer to use. Sometimes a good user experience comes specifically from animations that are forever-looping on purpose (for example. animated ",(0,a.yg)("inlineCode",{parentName:"p"},".gif"),"s)."),(0,a.yg)("p",null,'Detox currently has no API\'s for "black listing" animations - namely, excluding them from the synchronization process (i.e. as it does with network calls). Therefore, you might want to consider removing the looping animation in your tests by rebuilding the app with such animating elements replaced by ',(0,a.yg)("a",{parentName:"p",href:"/Detox/docs/guide/mocking"},"mocks"),"."),(0,a.yg)("h4",{id:"dealing-with-hidden-animations"},"Dealing with ",(0,a.yg)("strong",{parentName:"h4"},"hidden")," animations"),(0,a.yg)("p",null,"Not all synchronization issues around animations are trivial:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The animation can be associated with an element that is rendered off-screen, such as an item in a long news feed that's been rendered beyond the screen's bound, or a loader in a screen associated with a bottom tab that hasn't been navigated-to since the beginning of the test."),(0,a.yg)("li",{parentName:"ul"},"The animation can also be associated with elements which have been silently leaked (bug) under other UI elements. They are fully functional yet not visible to the user. For example: A compact loader accidentally showing under the app bar (android)/navigation bar (iOS).")),(0,a.yg)("p",null,"These types of animations can be difficult to track down, and sometimes fix."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"We are aiming to provide more advanced Detox-complementary tools that would help identify such animations more easily (follow Github issue ",(0,a.yg)("a",{parentName:"strong",href:"https://github.com/wix/Detox/issues/4734"},"#4734"),"). Until we do, here are some things you can do, roughly, in order:")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("em",{parentName:"p"},"(Most recommended) Start Detox in ",(0,a.yg)("a",{parentName:"em",href:"/Detox/docs/introduction/debugging"},"debug mode"),", and then run the blocked test step-by-step - either from the beginning of it, or starting a breakpoint you've set over where you think the synchronization issue starts. Step over the Detox commands until Detox gets blocked and signals for synchronization issues (i.e. in the logs). Then, explore the app yourself (!), physically looking for animations (e.g. by scrolling lists, navigating through tabs, and so on.\nYou might actually be able to see the animation in your own eyes, or witness Detox getting unblocked as your interactions release an otherwise endless loader."),"\n",(0,a.yg)("em",{parentName:"p"},"Do this iteratively until the exact animating UI element can be pinpointed."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("em",{parentName:"p"},"Run the test and ",(0,a.yg)("a",{parentName:"em",href:"/Detox/docs/api/device#devicecaptureviewhierarchyname"},"generate a view-hierarchy")," at the right timing, then inspect your app's layout in xcode's powerful view-hierarchy inspector"),". Look for off-screen or obscured elements.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("em",{parentName:"p"},"Run your app (without Detox) on Android in debug mode using Android Studio, and use its fancy ",(0,a.yg)("a",{parentName:"em",href:"https://developer.android.com/studio/debug/layout-inspector"},"Layout Inspector")," tool in order to inspect your app."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("em",{parentName:"p"},'Perform a "binary search" over the screen\'s content: Remove big blocks of content from it intermittently, rerunning the failing test each time, until synchronization stops blocking you. Then, slowly bring back repeatedly smaller and smaller sub-elements of the UI to see which one retriggers synchronization blockage. Eventually, you could pinpoint the exact culprit.')))),(0,a.yg)("h4",{id:"dealing-with-network-synchronization-issues"},"Dealing with network synchronization issues"),(0,a.yg)("p",null,'Sometimes Detox synchronization gets block, waiting for networks call that are in fact associated with URL\'s that happen to be "noise", meaning - specifically related to some kind of long polling background tasks, or web-socket connections. Such network calls should NOT be considered blocking in a user-flow test.'),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"This can be solved by ",(0,a.yg)("a",{parentName:"em",href:"/Detox/docs/api/device#deviceseturlblacklisturls"},"black-listing the URL's in Detox"),", which would exclude it from Detox's synchronization over the network:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"// Black-list (exclude) URL's in mid test-run:\nawait device.setURLBlacklist(['.*127.0.0.1.*']);\n\n// Black-list URL's from as early as app launch:\nawait device.launchApp({\n  launchArgs: {\n    detoxURLBlacklistRegex: '(\".*example.com/some-url/.*\")',\n  },\n});\n\n// Reset black-list\nawait device.setURLBlacklist([]);\n")),(0,a.yg)("h4",{id:"dealing-with-endless-timers"},"Dealing with endless timers"),(0,a.yg)("p",null,"By default, Detox is designed to ignore JavaScript's ",(0,a.yg)("inlineCode",{parentName:"p"},"setInterval()")," and will only wait for ",(0,a.yg)("inlineCode",{parentName:"p"},"setTimeout()"),"'s ",(0,a.yg)("strong",{parentName:"p"},"of up to 1.5 seconds"),"."),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"If you have an endless polling loop with short intervals implemented with ",(0,a.yg)("inlineCode",{parentName:"em"},"setTimeout"),", switch the implementation to ",(0,a.yg)("inlineCode",{parentName:"em"},"setInterval"),". If possible, avoid aggressive polling in your app altogether, the poor single JavaScript thread we have doesn\u2019t like it.")),(0,a.yg)("h4",{id:"last-resort-switching-to-manual-synchronization"},"Last resort: Switching to manual synchronization"),(0,a.yg)("p",null,"Disabling automatic synchronization makes sense in two cases:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"You have a synchronization problem (as explained above) but you can't find the source of the problem, or simply decide not to fix it (temporarily...)")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"You have a screen with a transient element, such as a toast or a cheering UI element, that is displayed temporarily and disappears automatically:"),(0,a.yg)("p",{parentName:"li"},(0,a.yg)("img",{alt:"Transient UI element",src:t(66184).A,width:"311",height:"672"})))),(0,a.yg)("p",null,"Detox always has the fail-safe solution of turning off automatic-synchronization altogether and waiting manually for elements."),(0,a.yg)("p",null,"This isn\u2019t the recommended approach as you'd be giving up Detox's synchronization super-powers and resort to manually defining timeouts, but hey, life is about trade-offs. You can do this with the main ",(0,a.yg)("a",{parentName:"p",href:"/Detox/docs/api/device#devicedisablesynchronization"},"synchronization switching API's"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"// Disabling in mid test-run:\nawait device.disableSynchronization();\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"// Launching the app with sync disabled from the start:\nawait device.launchApp({\n  launchArgs: {\n    detoxEnableSynchronization: 0\n  },\n});\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"// To turn synchronization back on (this command will block on synchronization):\nawait device.enableSynchronization();\n")),(0,a.yg)("p",null,"Mind that when this technique is applied, it effectively means that have to start using Detox API's differently (i.e. resort to using ",(0,a.yg)("a",{parentName:"p",href:"/Detox/docs/api/expect#withtimeouttimeout"},(0,a.yg)("inlineCode",{parentName:"a"},"waitFor().withTimeout()")),") API's and possibly even migrate test code."),(0,a.yg)("p",null,"For example, instead of:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"await element(by.id('write-message-btn')).tap(); // Navigate to message writing screen\nawait element(by.id('message-input')).typeText('Hello!'); // Type in a message\nawait element(by.id('submit-btn')).tap(); // Submit!\n")),(0,a.yg)("p",null,"Your test code will have to look more like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"await device.disableSynchronization();\n\nawait element(by.id('write-message-btn')).tap();\n\n// Wait up to 4 seconds for the screen to fully load\nawait waitFor(element(by.id('message-input'))).toBeVisible().withTimeout(4000);\n\nawait element(by.id('message-input')).typeText('Hello!');\nawait element(by.id('submit-btn')).tap();\n")),(0,a.yg)("h5",{id:"hybrid-manualautomatic-synchronization"},"Hybrid manual/automatic synchronization"),(0,a.yg)("p",null,"As of writing this, fine-tuned control over the various synchronized OS-systems that Detox monitors is not supported. Follow issue ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/wix/Detox/issues/1513"},"#1513")," to keep track of that."))}u.isMDXComponent=!0},66184:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/transient-ui-element-60ecb7f0788d1528f9f0a82146b9b9f0.png"}}]);